<?php
/**
 * Theme Builder PRO - Professional Visual Theme Editor
 * Complete HTML/CSS editor with AI assistance, versioning, and multi-theme support
 *
 * Features:
 * - Live HTML/CSS editors (Monaco)
 * - Slideout control panels
 * - AI chat overlay for on-the-fly changes
 * - Theme versioning & changelog
 * - Multiple theme presets
 * - Split-screen/multi-window preview
 * - Save to core templates
 *
 * @package CIS\Modules\AdminUI
 * @version 2.0.0
 */

require_once $_SERVER['DOCUMENT_ROOT'] . '/modules/base/bootstrap.php';

// Set page variables for breadcrumbs
$pageParent = 'Admin UI';
$pageTitle = 'Theme Builder PRO';

// Define paths
define('ADMIN_UI_PATH', __DIR__);
define('TEMPLATES_PATH', ADMIN_UI_PATH . '/_templates');
define('THEMES_PATH', ADMIN_UI_PATH . '/themes');
define('COMPONENTS_PATH', TEMPLATES_PATH . '/components');

// Ensure themes directory exists
if (!is_dir(THEMES_PATH)) {
    mkdir(THEMES_PATH, 0755, true);
}

// Handle AJAX requests
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    header('Content-Type: application/json');

    switch ($_POST['action']) {
        case 'list_themes':
            $themes = [];
            $files = glob(THEMES_PATH . '/*.json');
            foreach ($files as $file) {
                $data = json_decode(file_get_contents($file), true);
                $themes[] = [
                    'id' => basename($file, '.json'),
                    'name' => $data['name'] ?? 'Unnamed',
                    'version' => $data['version'] ?? '1.0.0',
                    'active' => $data['active'] ?? false,
                    'modified' => date('Y-m-d H:i:s', filemtime($file))
                ];
            }
            echo json_encode(['success' => true, 'themes' => $themes]);
            exit;

        case 'load_theme':
            $themeId = $_POST['theme_id'] ?? 'default';
            $file = THEMES_PATH . "/{$themeId}.json";
            if (file_exists($file)) {
                $theme = json_decode(file_get_contents($file), true);
                echo json_encode(['success' => true, 'theme' => $theme]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Theme not found']);
            }
            exit;

        case 'save_theme':
            $theme = json_decode($_POST['theme_data'], true);
            $themeId = $theme['id'] ?? 'theme_' . time();

            // Add metadata
            $theme['modified'] = date('Y-m-d H:i:s');
            $theme['version'] = $theme['version'] ?? '1.0.0';

            $file = THEMES_PATH . "/{$themeId}.json";
            file_put_contents($file, json_encode($theme, JSON_PRETTY_PRINT));

            echo json_encode(['success' => true, 'theme_id' => $themeId]);
            exit;

        case 'activate_theme':
            $themeId = $_POST['theme_id'] ?? 'default';

            // Deactivate all themes
            foreach (glob(THEMES_PATH . '/*.json') as $file) {
                $data = json_decode(file_get_contents($file), true);
                $data['active'] = false;
                file_put_contents($file, json_encode($data, JSON_PRETTY_PRINT));
            }

            // Activate selected theme
            $file = THEMES_PATH . "/{$themeId}.json";
            if (file_exists($file)) {
                $data = json_decode(file_get_contents($file), true);
                $data['active'] = true;
                file_put_contents($file, json_encode($data, JSON_PRETTY_PRINT));

                // Generate CSS from theme
                generateCSSFromTheme($data);

                echo json_encode(['success' => true]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Theme not found']);
            }
            exit;

        case 'delete_theme':
            $themeId = $_POST['theme_id'] ?? '';
            $file = THEMES_PATH . "/{$themeId}.json";
            if (file_exists($file) && $themeId !== 'default') {
                unlink($file);
                echo json_encode(['success' => true]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Cannot delete default theme']);
            }
            exit;

        case 'ai_chat':
            $message = $_POST['message'] ?? '';
            $context = json_decode($_POST['context'] ?? '{}', true);

            // TODO: Integrate with AI assistant
            $response = processAIMessage($message, $context);

            echo json_encode(['success' => true, 'response' => $response]);
            exit;

        case 'get_component':
            $component = $_POST['component'] ?? '';
            $file = COMPONENTS_PATH . "/{$component}.php";
            if (file_exists($file)) {
                echo json_encode([
                    'success' => true,
                    'html' => file_get_contents($file),
                    'path' => $file
                ]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Component not found']);
            }
            exit;

        case 'save_component':
            $component = $_POST['component'] ?? '';
            $html = $_POST['html'] ?? '';
            $file = COMPONENTS_PATH . "/{$component}.php";

            // Backup original
            if (file_exists($file)) {
                copy($file, $file . '.backup.' . date('YmdHis'));
            }

            file_put_contents($file, $html);
            echo json_encode(['success' => true]);
            exit;
    }
}

// Helper function to generate CSS from theme
function generateCSSFromTheme($theme) {
    $css = ":root {\n";
    foreach ($theme['colors'] ?? [] as $key => $value) {
        $css .= "    --cis-{$key}: {$value};\n";
    }
    foreach ($theme['typography'] ?? [] as $key => $value) {
        $css .= "    --cis-{$key}: {$value};\n";
    }
    foreach ($theme['spacing'] ?? [] as $key => $value) {
        $css .= "    --cis-{$key}: {$value};\n";
    }
    $css .= "}\n";

    file_put_contents(TEMPLATES_PATH . '/css/theme-generated.css', $css);
}

// Helper function to process AI messages
function processAIMessage($message, $context) {
    // Simple pattern matching for now
    // TODO: Integrate with GPT API

    $changes = [];

    if (preg_match('/change.*primary.*to\s+(#[0-9a-f]{6})/i', $message, $m)) {
        $changes['colors']['primary'] = $m[1];
    }

    if (preg_match('/make.*font.*(\d+)px/i', $message, $m)) {
        $changes['typography']['base-size'] = $m[1] . 'px';
    }

    return [
        'message' => 'I can help with that! Here are the changes I suggest:',
        'changes' => $changes,
        'explanation' => 'Based on your request, I\'ve updated the theme settings.'
    ];
}

// Load default theme if exists
$defaultThemeFile = THEMES_PATH . '/default.json';
if (!file_exists($defaultThemeFile)) {
    // Create default theme
    $defaultTheme = [
        'id' => 'default',
        'name' => 'Vape Shed Default',
        'version' => '1.0.0',
        'active' => true,
        'colors' => [
            'primary' => '#8B5CF6',
            'success' => '#10b981',
            'warning' => '#f59e0b',
            'danger' => '#ef4444',
            'info' => '#3b82f6'
        ],
        'typography' => [
            'base-size' => '16px',
            'base-family' => 'system-ui, -apple-system, sans-serif'
        ],
        'spacing' => [
            'base-padding' => '1rem',
            'base-margin' => '1rem'
        ]
    ];
    file_put_contents($defaultThemeFile, json_encode($defaultTheme, JSON_PRETTY_PRINT));
}

// Start output buffering for template wrapper
ob_start();
?>

<!-- Theme Builder PRO Content -->
<style>
    /* Override body styles for this page */
    body {
        overflow: hidden !important;
    }

    /* Main Container - Full Width inside dashboard-main */
    .theme-builder-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        background: #0f172a;
    }        /* Left Panel - Editors */
        .editor-panel {
            width: 50%;
            display: flex;
            flex-direction: column;
            background: #1e293b;
            border-right: 1px solid #334155;
        }

        .editor-tabs {
            display: flex;
            background: #0f172a;
            border-bottom: 1px solid #334155;
            padding: 0.5rem 1rem;
            gap: 0.5rem;
        }

        .editor-tab {
            padding: 0.5rem 1rem;
            background: #1e293b;
            border: none;
            color: #94a3b8;
            cursor: pointer;
            border-radius: 6px 6px 0 0;
            transition: all 0.2s;
        }

        .editor-tab.active {
            background: #8B5CF6;
            color: white;
        }

        .editor-container {
            flex: 1;
            position: relative;
        }

        .editor-wrapper {
            display: none;
            height: 100%;
        }

        .editor-wrapper.active {
            display: block;
        }

        #htmlEditor, #cssEditor, #jsEditor {
            width: 100%;
            height: 100%;
        }

        /* Right Panel - Preview */
        .preview-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #1e293b;
        }

        .preview-toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background: #0f172a;
            border-bottom: 1px solid #334155;
        }

        .preview-toolbar-group {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .toolbar-btn {
            padding: 0.5rem 1rem;
            background: #1e293b;
            border: 1px solid #334155;
            color: #e2e8f0;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.2s;
        }

        .toolbar-btn:hover {
            background: #334155;
        }

        .toolbar-btn.active {
            background: #8B5CF6;
            border-color: #8B5CF6;
        }

        #previewFrame {
            flex: 1;
            border: none;
            background: white;
        }

        /* Slideout Panels */
        .slideout-panel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 400px;
            height: 100vh;
            background: #1e293b;
            box-shadow: -4px 0 20px rgba(0,0,0,0.3);
            transition: right 0.3s ease;
            z-index: 10000;
            overflow-y: auto;
        }

        .slideout-panel.open {
            right: 0;
        }

        .slideout-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 1.5rem;
            background: #0f172a;
            border-bottom: 1px solid #334155;
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .slideout-header h4 {
            margin: 0;
            color: #e2e8f0;
            font-size: 1.125rem;
        }

        .slideout-close {
            background: none;
            border: none;
            color: #94a3b8;
            font-size: 1.5rem;
            cursor: pointer;
            transition: color 0.2s;
        }

        .slideout-close:hover {
            color: #e2e8f0;
        }

        .slideout-content {
            padding: 1.5rem;
        }

        .control-group {
            margin-bottom: 1.5rem;
        }

        .control-group label {
            display: block;
            color: #94a3b8;
            font-size: 0.875rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .color-picker-wrapper {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .color-picker-wrapper input[type="color"] {
            width: 50px;
            height: 50px;
            border: 2px solid #334155;
            border-radius: 8px;
            cursor: pointer;
        }

        .color-picker-wrapper input[type="text"] {
            flex: 1;
            padding: 0.75rem;
            background: #0f172a;
            border: 1px solid #334155;
            color: #e2e8f0;
            border-radius: 6px;
            font-family: 'Courier New', monospace;
        }

        /* AI Chat Overlay */
        .ai-chat-overlay {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 400px;
            height: 600px;
            background: #1e293b;
            border-radius: 16px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
            display: none;
            flex-direction: column;
            z-index: 10001;
        }

        .ai-chat-overlay.open {
            display: flex;
        }

        .ai-chat-header {
            padding: 1rem 1.5rem;
            background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
            color: white;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .ai-chat-header h5 {
            margin: 0;
            font-weight: 600;
        }

        .ai-chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: #0f172a;
        }

        .ai-message {
            margin-bottom: 1rem;
            display: flex;
            gap: 0.75rem;
        }

        .ai-message.user {
            flex-direction: row-reverse;
        }

        .ai-message-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            font-size: 1.125rem;
        }

        .ai-message.bot .ai-message-avatar {
            background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
            color: white;
        }

        .ai-message.user .ai-message-avatar {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .ai-message-content {
            flex: 1;
            padding: 0.75rem 1rem;
            border-radius: 12px;
            background: #1e293b;
            color: #e2e8f0;
        }

        .ai-chat-input {
            padding: 1rem 1.5rem;
            background: #1e293b;
            border-top: 1px solid #334155;
            border-radius: 0 0 16px 16px;
        }

        .ai-input-wrapper {
            display: flex;
            gap: 0.75rem;
        }

        .ai-input-wrapper input {
            flex: 1;
            padding: 0.75rem 1rem;
            background: #0f172a;
            border: 1px solid #334155;
            color: #e2e8f0;
            border-radius: 8px;
        }

        .ai-send-btn {
            padding: 0.75rem 1.5rem;
            background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
            border: none;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
        }

        /* Floating Action Buttons */
        .fab-container {
            position: fixed;
            bottom: 30px;
            left: 30px;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            z-index: 9999;
        }

        .fab {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            transition: all 0.2s;
            font-size: 1.25rem;
        }

        .fab:hover {
            transform: scale(1.1);
        }

        .fab-primary { background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%); }
        .fab-success { background: linear-gradient(135deg, #10b981 0%, #059669 100%); }
        .fab-warning { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); }
        .fab-info { background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); }

        /* Theme Selector */
        .theme-selector {
            padding: 0.5rem;
            background: #0f172a;
            border: 1px solid #334155;
            color: #e2e8f0;
            border-radius: 6px;
        }
    </style>
</head>
<body>
    <!-- Include header and sidebar -->
    <?php
    include ADMIN_UI_COMPONENTS_PATH . '/header-v2.php';
    include ADMIN_UI_COMPONENTS_PATH . '/sidebar.php';
    ?>

    <!-- Main Theme Builder Interface -->
    <div class="dashboard-main" style="padding: 0; height: calc(100vh - 120px);">
        <div class="theme-builder-pro">
            <!-- Left Panel - Code Editors -->
            <div class="editor-panel">
                <div class="editor-tabs">
                    <button class="editor-tab active" data-editor="html">
                        <i class="fab fa-html5"></i> HTML
                    </button>
                    <button class="editor-tab" data-editor="css">
                        <i class="fab fa-css3-alt"></i> CSS
                    </button>
                    <button class="editor-tab" data-editor="js">
                        <i class="fab fa-js"></i> JavaScript
                    </button>
                </div>

                <div class="editor-container">
                    <div class="editor-wrapper active" data-editor="html">
                        <div id="htmlEditor"></div>
                    </div>
                    <div class="editor-wrapper" data-editor="css">
                        <div id="cssEditor"></div>
                    </div>
                    <div class="editor-wrapper" data-editor="js">
                        <div id="jsEditor"></div>
                    </div>
                </div>
            </div>

            <!-- Right Panel - Live Preview -->
            <div class="preview-panel">
                <div class="preview-toolbar">
                    <div class="preview-toolbar-group">
                        <button class="toolbar-btn active" data-view="desktop">
                            <i class="fas fa-desktop"></i> Desktop
                        </button>
                        <button class="toolbar-btn" data-view="tablet">
                            <i class="fas fa-tablet-alt"></i> Tablet
                        </button>
                        <button class="toolbar-btn" data-view="mobile">
                            <i class="fas fa-mobile-alt"></i> Mobile
                        </button>
                    </div>

                    <div class="preview-toolbar-group">
                        <select class="theme-selector" id="themeSelector">
                            <option value="default">Default Theme</option>
                        </select>

                        <button class="toolbar-btn" id="refreshPreview">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>

                        <button class="toolbar-btn" id="saveTheme">
                            <i class="fas fa-save"></i> Save
                        </button>
                    </div>
                </div>

                <iframe id="previewFrame" src="/modules/admin-ui/template-showcase.php?demo=dashboard"></iframe>
            </div>
        </div>
    </div>

    <!-- Floating Action Buttons -->
    <div class="fab-container">
        <button class="fab fab-primary" id="fab-colors" title="Colors">
            <i class="fas fa-palette"></i>
        </button>
        <button class="fab fab-success" id="fab-typography" title="Typography">
            <i class="fas fa-font"></i>
        </button>
        <button class="fab fab-warning" id="fab-spacing" title="Spacing">
            <i class="fas fa-ruler-combined"></i>
        </button>
        <button class="fab fab-info" id="fab-ai" title="AI Assistant">
            <i class="fas fa-robot"></i>
        </button>
    </div>

    <!-- Slideout Panel - Colors -->
    <div class="slideout-panel" id="panel-colors">
        <div class="slideout-header">
            <h4><i class="fas fa-palette"></i> Color Settings</h4>
            <button class="slideout-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="slideout-content">
            <div class="control-group">
                <label>Primary Color</label>
                <div class="color-picker-wrapper">
                    <input type="color" id="color-primary" value="#8B5CF6">
                    <input type="text" id="color-primary-hex" value="#8B5CF6">
                </div>
            </div>

            <div class="control-group">
                <label>Success Color</label>
                <div class="color-picker-wrapper">
                    <input type="color" id="color-success" value="#10b981">
                    <input type="text" id="color-success-hex" value="#10b981">
                </div>
            </div>

            <div class="control-group">
                <label>Warning Color</label>
                <div class="color-picker-wrapper">
                    <input type="color" id="color-warning" value="#f59e0b">
                    <input type="text" id="color-warning-hex" value="#f59e0b">
                </div>
            </div>

            <div class="control-group">
                <label>Danger Color</label>
                <div class="color-picker-wrapper">
                    <input type="color" id="color-danger" value="#ef4444">
                    <input type="text" id="color-danger-hex" value="#ef4444">
                </div>
            </div>

            <div class="control-group">
                <label>Info Color</label>
                <div class="color-picker-wrapper">
                    <input type="color" id="color-info" value="#3b82f6">
                    <input type="text" id="color-info-hex" value="#3b82f6">
                </div>
            </div>

            <button class="btn btn-primary btn-block mt-4" id="apply-colors">
                Apply Colors
            </button>
        </div>
    </div>

    <!-- Slideout Panel - Typography -->
    <div class="slideout-panel" id="panel-typography">
        <div class="slideout-header">
            <h4><i class="fas fa-font"></i> Typography Settings</h4>
            <button class="slideout-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="slideout-content">
            <div class="control-group">
                <label>Font Family</label>
                <select class="form-control" id="font-family">
                    <option value="system-ui, -apple-system, sans-serif">System (Default)</option>
                    <option value="'Inter', sans-serif">Inter</option>
                    <option value="'Roboto', sans-serif">Roboto</option>
                    <option value="'Open Sans', sans-serif">Open Sans</option>
                </select>
            </div>

            <div class="control-group">
                <label>Base Font Size</label>
                <input type="range" class="form-control-range" id="font-size" min="12" max="20" value="16">
                <span id="font-size-display">16px</span>
            </div>

            <button class="btn btn-primary btn-block mt-4" id="apply-typography">
                Apply Typography
            </button>
        </div>
    </div>

    <!-- Slideout Panel - Spacing -->
    <div class="slideout-panel" id="panel-spacing">
        <div class="slideout-header">
            <h4><i class="fas fa-ruler-combined"></i> Spacing Settings</h4>
            <button class="slideout-close"><i class="fas fa-times"></i></button>
        </div>
        <div class="slideout-content">
            <div class="control-group">
                <label>Base Padding</label>
                <input type="range" class="form-control-range" id="base-padding" min="0.5" max="3" step="0.25" value="1">
                <span id="base-padding-display">1rem</span>
            </div>

            <div class="control-group">
                <label>Border Radius</label>
                <input type="range" class="form-control-range" id="border-radius" min="0" max="24" value="6">
                <span id="border-radius-display">6px</span>
            </div>

            <button class="btn btn-primary btn-block mt-4" id="apply-spacing">
                Apply Spacing
            </button>
        </div>
    </div>

    <!-- AI Chat Overlay -->
    <div class="ai-chat-overlay" id="aiChatOverlay">
        <div class="ai-chat-header">
            <h5><i class="fas fa-robot"></i> AI Theme Assistant</h5>
            <button class="slideout-close" id="close-ai-chat"><i class="fas fa-times"></i></button>
        </div>
        <div class="ai-chat-messages" id="aiChatMessages">
            <div class="ai-message bot">
                <div class="ai-message-avatar"><i class="fas fa-robot"></i></div>
                <div class="ai-message-content">
                    Hi! I'm your AI theme assistant. I can help you make changes to your theme on the fly. Try asking me to "change the primary color to blue" or "make the font bigger"!
                </div>
            </div>
        </div>
        <div class="ai-chat-input">
            <div class="ai-input-wrapper">
                <input type="text" id="aiInput" placeholder="Ask me to change anything...">
                <button class="ai-send-btn" id="aiSend">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Monaco Editor CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Initialize Monaco Editor
        require.config({ paths: { vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' }});

        let htmlEditor, cssEditor, jsEditor;

        require(['vs/editor/editor.main'], function() {
            // HTML Editor
            htmlEditor = monaco.editor.create(document.getElementById('htmlEditor'), {
                value: '<!-- Edit HTML here -->\n<div class="container">\n  <h1>Hello World</h1>\n</div>',
                language: 'html',
                theme: 'vs-dark',
                automaticLayout: true
            });

            // CSS Editor
            cssEditor = monaco.editor.create(document.getElementById('cssEditor'), {
                value: '/* Edit CSS here */\n:root {\n  --custom-color: #8B5CF6;\n}\n\nh1 {\n  color: var(--custom-color);\n}',
                language: 'css',
                theme: 'vs-dark',
                automaticLayout: true
            });

            // JS Editor
            jsEditor = monaco.editor.create(document.getElementById('jsEditor'), {
                value: '// Edit JavaScript here\nconsole.log("Theme Builder PRO");',
                language: 'javascript',
                theme: 'vs-dark',
                automaticLayout: true
            });

            // Auto-refresh preview on change
            let refreshTimeout;
            [htmlEditor, cssEditor, jsEditor].forEach(editor => {
                editor.onDidChangeModelContent(() => {
                    clearTimeout(refreshTimeout);
                    refreshTimeout = setTimeout(refreshPreview, 1000);
                });
            });
        });

        // Editor tab switching
        document.querySelectorAll('.editor-tab').forEach(tab => {
            tab.addEventListener('click', () => {
                const editor = tab.dataset.editor;

                document.querySelectorAll('.editor-tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.editor-wrapper').forEach(w => w.classList.remove('active'));

                tab.classList.add('active');
                document.querySelector(`.editor-wrapper[data-editor="${editor}"]`).classList.add('active');
            });
        });

        // FAB button handlers
        document.getElementById('fab-colors').addEventListener('click', () => {
            closeAllPanels();
            document.getElementById('panel-colors').classList.add('open');
        });

        document.getElementById('fab-typography').addEventListener('click', () => {
            closeAllPanels();
            document.getElementById('panel-typography').classList.add('open');
        });

        document.getElementById('fab-spacing').addEventListener('click', () => {
            closeAllPanels();
            document.getElementById('panel-spacing').classList.add('open');
        });

        document.getElementById('fab-ai').addEventListener('click', () => {
            closeAllPanels();
            document.getElementById('aiChatOverlay').classList.add('open');
        });

        // Close panels
        document.querySelectorAll('.slideout-close').forEach(btn => {
            btn.addEventListener('click', closeAllPanels);
        });

        function closeAllPanels() {
            document.querySelectorAll('.slideout-panel, .ai-chat-overlay').forEach(panel => {
                panel.classList.remove('open');
            });
        }

        // Refresh preview
        function refreshPreview() {
            const frame = document.getElementById('previewFrame');
            const html = htmlEditor.getValue();
            const css = cssEditor.getValue();
            const js = jsEditor.getValue();

            const doc = frame.contentDocument || frame.contentWindow.document;
            doc.open();
            doc.write(`
                <!DOCTYPE html>
                <html>
                <head>
                    <link rel="stylesheet" href="/modules/admin-ui/_templates/css/theme-generated.css">
                    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
                    <style>${css}</style>
                </head>
                <body>
                    ${html}
                    <script>${js}<\/script>
                </body>
                </html>
            `);
            doc.close();
        }

        document.getElementById('refreshPreview').addEventListener('click', refreshPreview);

        // Save theme
        document.getElementById('saveTheme').addEventListener('click', async () => {
            const theme = {
                id: 'custom_' + Date.now(),
                name: prompt('Theme name:', 'My Custom Theme'),
                html: htmlEditor.getValue(),
                css: cssEditor.getValue(),
                js: jsEditor.getValue(),
                colors: {
                    primary: document.getElementById('color-primary').value,
                    success: document.getElementById('color-success').value,
                    warning: document.getElementById('color-warning').value,
                    danger: document.getElementById('color-danger').value,
                    info: document.getElementById('color-info').value
                }
            };

            const formData = new FormData();
            formData.append('action', 'save_theme');
            formData.append('theme_data', JSON.stringify(theme));

            const response = await fetch('', { method: 'POST', body: formData });
            const result = await response.json();

            if (result.success) {
                alert('Theme saved successfully!');
                loadThemes();
            }
        });

        // Load themes
        async function loadThemes() {
            const formData = new FormData();
            formData.append('action', 'list_themes');

            const response = await fetch('', { method: 'POST', body: formData });
            const result = await response.json();

            if (result.success) {
                const selector = document.getElementById('themeSelector');
                selector.innerHTML = '';
                result.themes.forEach(theme => {
                    const option = document.createElement('option');
                    option.value = theme.id;
                    option.textContent = `${theme.name} (v${theme.version})`;
                    if (theme.active) option.selected = true;
                    selector.appendChild(option);
                });
            }
        }

        // AI Chat
        document.getElementById('aiSend').addEventListener('click', async () => {
            const input = document.getElementById('aiInput');
            const message = input.value.trim();
            if (!message) return;

            // Add user message
            const messagesDiv = document.getElementById('aiChatMessages');
            messagesDiv.innerHTML += `
                <div class="ai-message user">
                    <div class="ai-message-avatar"><i class="fas fa-user"></i></div>
                    <div class="ai-message-content">${message}</div>
                </div>
            `;

            input.value = '';

            // Send to server
            const formData = new FormData();
            formData.append('action', 'ai_chat');
            formData.append('message', message);
            formData.append('context', JSON.stringify({
                html: htmlEditor.getValue(),
                css: cssEditor.getValue()
            }));

            const response = await fetch('', { method: 'POST', body: formData });
            const result = await response.json();

            if (result.success) {
                messagesDiv.innerHTML += `
                    <div class="ai-message bot">
                        <div class="ai-message-avatar"><i class="fas fa-robot"></i></div>
                        <div class="ai-message-content">${result.response.message}</div>
                    </div>
                `;

                // Apply changes if any
                if (result.response.changes) {
                    applyAIChanges(result.response.changes);
                }
            }

            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        function applyAIChanges(changes) {
            if (changes.colors) {
                Object.entries(changes.colors).forEach(([key, value]) => {
                    const input = document.getElementById(`color-${key}`);
                    const hex = document.getElementById(`color-${key}-hex`);
                    if (input && hex) {
                        input.value = value;
                        hex.value = value;
                    }
                });
            }
        }

        // Load themes on page load
        loadThemes();
    </script>
</body>
</html>
