<?php
/**
 * Theme Generator - Programmatically generates CSS from config
 * 
 * @package CIS\Modules\AdminUI
 */

class ThemeGenerator {
    private $config;
    private $outputPath;
    private $customPath;
    private $changelogPath;
    
    public function __construct() {
        $this->config = require __DIR__ . '/../config/theme-config.php';
        $this->outputPath = __DIR__ . '/../_templates/css/theme-generated.css';
        $this->customPath = __DIR__ . '/../_templates/css/theme-custom.css';
        $this->changelogPath = __DIR__ . '/../config/theme-changelog.json';
        
        // Ensure directories exist
        $cssDir = dirname($this->outputPath);
        if (!is_dir($cssDir)) {
            mkdir($cssDir, 0755, true);
        }
    }
    
    /**
     * Generate primary theme CSS from config
     * This creates the foundation CSS that rarely changes
     */
    public function generatePrimaryTheme() {
        $css = "/**\n";
        $css .= " * CIS Admin UI - Generated Theme\n";
        $css .= " * Version: {$this->config['version']}\n";
        $css .= " * Generated: " . date('Y-m-d H:i:s') . "\n";
        $css .= " * DO NOT EDIT THIS FILE DIRECTLY - Use theme builder\n";
        $css .= " */\n\n";
        
        // CSS Variables
        $css .= ":root {\n";
        $css .= "  /* Primary Colors */\n";
        $css .= "  --cis-primary: {$this->config['primary']['main']};\n";
        $css .= "  --cis-primary-light: {$this->config['primary']['light']};\n";
        $css .= "  --cis-primary-dark: {$this->config['primary']['dark']};\n";
        $css .= "  --cis-primary-contrast: {$this->config['primary']['contrast']};\n\n";
        
        $css .= "  /* Secondary Colors */\n";
        $css .= "  --cis-secondary: {$this->config['secondary']['main']};\n";
        $css .= "  --cis-secondary-light: {$this->config['secondary']['light']};\n";
        $css .= "  --cis-secondary-dark: {$this->config['secondary']['dark']};\n\n";
        
        $css .= "  /* Status Colors */\n";
        $css .= "  --cis-success: {$this->config['success']};\n";
        $css .= "  --cis-warning: {$this->config['warning']};\n";
        $css .= "  --cis-danger: {$this->config['danger']};\n";
        $css .= "  --cis-info: {$this->config['info']};\n\n";
        
        $css .= "  /* Sidebar */\n";
        $css .= "  --cis-sidebar-width: {$this->config['sidebar']['width']};\n";
        $css .= "  --cis-sidebar-bg: {$this->config['sidebar']['bg']};\n";
        $css .= "  --cis-sidebar-text: {$this->config['sidebar']['text']};\n";
        $css .= "  --cis-sidebar-hover: {$this->config['sidebar']['hover']};\n\n";
        
        $css .= "  /* Header */\n";
        $css .= "  --cis-header-height: {$this->config['header']['height']};\n";
        $css .= "  --cis-header-bg: {$this->config['header']['bg']};\n";
        $css .= "  --cis-header-border: {$this->config['header']['border']};\n\n";
        
        $css .= "  /* Typography */\n";
        $css .= "  --cis-font-primary: {$this->config['fonts']['primary']};\n";
        $css .= "  --cis-font-mono: {$this->config['fonts']['mono']};\n\n";
        
        $css .= "  /* Spacing */\n";
        $css .= "  --cis-spacing-unit: {$this->config['spacing']['unit']};\n\n";
        
        $css .= "  /* Border Radius */\n";
        $css .= "  --cis-radius-sm: {$this->config['radius']['sm']};\n";
        $css .= "  --cis-radius-md: {$this->config['radius']['md']};\n";
        $css .= "  --cis-radius-lg: {$this->config['radius']['lg']};\n\n";
        
        $css .= "  /* Shadows */\n";
        $css .= "  --cis-shadow-sm: {$this->config['shadows']['sm']};\n";
        $css .= "  --cis-shadow-md: {$this->config['shadows']['md']};\n";
        $css .= "  --cis-shadow-lg: {$this->config['shadows']['lg']};\n";
        $css .= "}\n\n";
        
        // Foundation Styles
        $css .= $this->generateFoundationStyles();
        
        // Save to file
        file_put_contents($this->outputPath, $css);
        
        // Log the generation
        $this->logChange('generate', 'Generated primary theme CSS', [
            'version' => $this->config['version'],
            'file' => 'theme-generated.css',
        ]);
        
        return true;
    }
    
    /**
     * Generate foundation CSS using variables
     */
    private function generateFoundationStyles() {
        $css = "/* Foundation Styles - Use CSS Variables */\n\n";
        
        // Body
        $css .= "body {\n";
        $css .= "  font-family: var(--cis-font-primary);\n";
        $css .= "  margin: 0;\n";
        $css .= "  padding: 0;\n";
        $css .= "}\n\n";
        
        // Buttons
        $css .= ".btn-primary {\n";
        $css .= "  background: var(--cis-primary);\n";
        $css .= "  color: var(--cis-primary-contrast);\n";
        $css .= "  border: none;\n";
        $css .= "  padding: 0.5rem 1rem;\n";
        $css .= "  border-radius: var(--cis-radius-sm);\n";
        $css .= "  cursor: pointer;\n";
        $css .= "  transition: all 0.2s;\n";
        $css .= "}\n\n";
        
        $css .= ".btn-primary:hover {\n";
        $css .= "  background: var(--cis-primary-dark);\n";
        $css .= "  box-shadow: var(--cis-shadow-md);\n";
        $css .= "}\n\n";
        
        // Cards
        $css .= ".card {\n";
        $css .= "  background: #ffffff;\n";
        $css .= "  border-radius: var(--cis-radius-md);\n";
        $css .= "  box-shadow: var(--cis-shadow-md);\n";
        $css .= "  padding: 1.5rem;\n";
        $css .= "  margin-bottom: 1.5rem;\n";
        $css .= "  transition: all 0.3s;\n";
        $css .= "}\n\n";
        
        $css .= ".card:hover {\n";
        $css .= "  box-shadow: var(--cis-shadow-lg);\n";
        $css .= "  transform: translateY(-4px);\n";
        $css .= "}\n\n";
        
        // Sidebar
        $css .= ".cis-sidebar {\n";
        $css .= "  width: var(--cis-sidebar-width);\n";
        $css .= "  background: var(--cis-sidebar-bg);\n";
        $css .= "  color: var(--cis-sidebar-text);\n";
        $css .= "  position: fixed;\n";
        $css .= "  left: 0;\n";
        $css .= "  top: 0;\n";
        $css .= "  height: 100vh;\n";
        $css .= "  overflow-y: auto;\n";
        $css .= "  z-index: 1000;\n";
        $css .= "}\n\n";
        
        // Header
        $css .= ".cis-header {\n";
        $css .= "  height: var(--cis-header-height);\n";
        $css .= "  background: var(--cis-header-bg);\n";
        $css .= "  border-bottom: 1px solid var(--cis-header-border);\n";
        $css .= "  position: fixed;\n";
        $css .= "  top: 0;\n";
        $css .= "  left: var(--cis-sidebar-width);\n";
        $css .= "  right: 0;\n";
        $css .= "  z-index: 999;\n";
        $css .= "}\n\n";
        
        // Main content area
        $css .= ".dashboard-main {\n";
        $css .= "  margin-left: var(--cis-sidebar-width);\n";
        $css .= "  margin-top: var(--cis-header-height);\n";
        $css .= "  padding: 2rem;\n";
        $css .= "  min-height: calc(100vh - var(--cis-header-height));\n";
        $css .= "}\n\n";
        
        return $css;
    }
    
    /**
     * Initialize custom CSS file if it doesn't exist
     */
    public function initializeCustomCSS() {
        if (!file_exists($this->customPath)) {
            $css = "/**\n";
            $css .= " * CIS Admin UI - Custom Theme Overrides\n";
            $css .= " * Add your custom styles here\n";
            $css .= " * These styles will override the generated theme\n";
            $css .= " */\n\n";
            $css .= "/* Your custom styles below */\n\n";
            
            file_put_contents($this->customPath, $css);
        }
    }
    
    /**
     * Log theme changes
     */
    private function logChange($action, $description, $data = []) {
        $changelog = [];
        if (file_exists($this->changelogPath)) {
            $changelog = json_decode(file_get_contents($this->changelogPath), true);
        }
        
        $changelog[] = [
            'timestamp' => date('Y-m-d H:i:s'),
            'action' => $action,
            'description' => $description,
            'data' => $data,
            'version' => $this->config['version'],
        ];
        
        file_put_contents($this->changelogPath, json_encode($changelog, JSON_PRETTY_PRINT));
    }
    
    /**
     * Get changelog
     */
    public function getChangelog() {
        if (file_exists($this->changelogPath)) {
            return json_decode(file_get_contents($this->changelogPath), true);
        }
        return [];
    }
    
    /**
     * Update theme config
     */
    public function updateConfig($updates) {
        // Merge updates with existing config
        $newConfig = array_replace_recursive($this->config, $updates);
        
        // Increment version
        $version = explode('.', $newConfig['version']);
        $version[2] = (int)$version[2] + 1;
        $newConfig['version'] = implode('.', $version);
        $newConfig['last_updated'] = date('Y-m-d H:i:s');
        
        // Save config
        $configContent = "<?php\n/**\n * Admin UI Theme Configuration\n * Version: {$newConfig['version']}\n * Updated: {$newConfig['last_updated']}\n */\n\nreturn " . var_export($newConfig, true) . ";\n";
        file_put_contents(__DIR__ . '/../config/theme-config.php', $configContent);
        
        // Regenerate CSS
        $this->config = $newConfig;
        $this->generatePrimaryTheme();
        
        // Log the change
        $this->logChange('update', 'Updated theme configuration', $updates);
        
        return $newConfig;
    }
}
