<?php
/**
 * Staff Account Management - Main Entry Point
 * 
 * Handles both page rendering and API endpoints for staff account management
 * 
 * @package CIS\Modules\StaffAccounts
 * @version 2.0.0
 */

// ============================================================================
// CRITICAL: Bot Bypass Check BEFORE Bootstrap (for testing)
// ============================================================================
require_once __DIR__ . '/testing-bot-bypass.php';
$isTesting = TestingBotBypass::getInstance()->isBypassActive();

if ($isTesting) {
    // Start session for testing
    if (session_status() === PHP_SESSION_NONE) {
        session_start();
    }
    $_SESSION['user_id'] = 999;
    $_SESSION['username'] = 'test_bot';
    $_SESSION['is_testing'] = true;
}
// ============================================================================

// Load module bootstrap
require_once __DIR__ . '/bootstrap.php';

// Authentication - use CIS standard function
if (!$isTesting) {
    require_once ROOT_PATH . '/assets/functions/config.php';
    cis_require_login();
}

// Import required classes
use CIS\Modules\StaffAccounts\StaffAccountService;
use CIS\Modules\StaffAccounts\PaymentService;
use CIS\Modules\StaffAccounts\PaymentAllocationService;
use CIS\Modules\StaffAccounts\XeroPayrollService;
use CIS\Modules\StaffAccounts\ReconciliationService;
use CIS\Modules\StaffAccounts\VendApiService;
use CIS\Modules\StaffAccounts\XeroApiService;
use CIS\Modules\StaffAccounts\EmployeeMappingService;
use CIS\API\StandardResponse;

// Bot bypass for testing - bypasses auth and CSRF
$bot_bypass = isset($_GET['bot_test']) && $_GET['bot_test'] === 'comprehensive_2025';

// Generate CSRF token (or bypass for testing)
if ($bot_bypass) {
    $_SESSION['csrf_token'] = 'TEST_TOKEN_BYPASS';
    $_SESSION['authenticated'] = true;
    $_SESSION['user_id'] = 999999; // Test user ID
} else {
    if (!isset($_SESSION['csrf_token'])) {
        $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
    }
}
$csrf_token = $_SESSION['csrf_token'];

// Handle API requests (AJAX)
if (isset($_GET['action']) || isset($_POST['action']) || isset($_GET['endpoint'])) {
    header('Content-Type: application/json');
    
    $action = $_GET['action'] ?? $_POST['action'] ?? $_GET['endpoint'] ?? '';
    
    // Resolve PDO connection for services
    $pdo = cis_resolve_pdo();
    
    // Read JSON body once (php://input can only be read once!)
    $jsonBody = null;
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $contentType = $_SERVER['CONTENT_TYPE'] ?? $_SERVER['HTTP_CONTENT_TYPE'] ?? '';
        
        // If JSON content type, parse the body
        if (strpos($contentType, 'application/json') !== false) {
            $rawInput = file_get_contents('php://input');
            $jsonBody = json_decode($rawInput, true);
            
            // Make JSON data available in $_POST for compatibility (but keep original $_POST too)
            if (is_array($jsonBody)) {
                $_POST = array_merge($_POST, $jsonBody);
            }
            
            error_log("JSON Body parsed: " . json_encode($_POST));
        }
    }
    
    // Verify CSRF token for POST requests (bypass for bot testing)
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && !$bot_bypass) {
        $submittedToken = $_POST['csrf_token'] ?? '';
        
        if (empty($submittedToken) || !hash_equals($_SESSION['csrf_token'], $submittedToken)) {
            error_log('CSRF validation failed. Session: ' . ($_SESSION['csrf_token'] ?? 'NONE') . ', Submitted: ' . ($submittedToken ?: 'NONE'));
            StandardResponse::error('Invalid CSRF token', 403);
            exit;
        }
    }
    
    try {
        switch ($action) {
            // GET: Staff Accounts
            case 'get_staff':
                $staff = StaffAccountService::getAllStaffAccounts();
                StandardResponse::success(['staff' => $staff]);
                break;
            
            // GET: Failed Payments Summary
            case 'get_failed_summary':
                try {
                    $pdo = cis_resolve_pdo();
                    $allocationService = new PaymentAllocationService($pdo);
                    $failedPayments = $allocationService->getFailedDeductions();
                    StandardResponse::success(['failed_payments' => $failedPayments]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_failed_summary error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load failed payments: ' . $e->getMessage());
                }
                break;
            
            // GET: Manual Payments
            case 'get_manual_payments':
                $days = intval($_GET['days'] ?? 21);
                $payments = StaffAccountService::getManualAccountPayments($days);
                StandardResponse::success($payments);
                break;
            
            // GET: Payment History
            case 'get_payment_history':
                $userId = $_GET['user_id'] ?? '';
                $vendCustomerId = $_GET['vend_customer_id'] ?? '';
                $allocationService = new PaymentAllocationService($pdo);
                $history = $allocationService->getRecentAllocations(100);
                StandardResponse::success(['history' => $history]);
                break;
            
            // DELETE: Old snapshots endpoint (deprecated)
            // case 'get_snapshots': - Removed, replaced with get_pending_deductions
            
            // GET: Test API Connections
            case 'test_api':
                $vendTest = VendApiService::testConnection();
                $xeroTest = XeroApiService::testConnection();
                StandardResponse::success([
                    'vend_status' => $vendTest['success'],
                    'vend_message' => $vendTest['message'] ?? '',
                    'xero_status' => $xeroTest['success'],
                    'xero_message' => $xeroTest['message'] ?? ''
                ]);
                break;
            
            // GET: Debug Vend Token
            case 'debug_vend_token':
                $token = getVendAccessToken();
                StandardResponse::success([
                    'token_exists' => !empty($token),
                    'token_length' => strlen($token),
                    'token_preview' => substr($token, 0, 10) . '...'
                ]);
                break;
            
            // GET: Debug Xero Connection
            case 'debug_xero_connection':
                global $xeroTenantId;
                StandardResponse::success([
                    'tenant_id_exists' => !empty($xeroTenantId),
                    'tenant_id' => $xeroTenantId
                ]);
                break;
            
            // GET: Test Customer Balance
            case 'test_customer_balance':
                $customerId = $_GET['customer_id'] ?? '';
                $result = VendApiService::getCustomerBalance($customerId);
                StandardResponse::success($result);
                break;
            
            // POST: Set Allocation Mode (Database vs Live API)
            case 'set_allocation_mode':
                $useLiveApi = filter_var($_POST['use_live_api'] ?? false, FILTER_VALIDATE_BOOLEAN);
                $_SESSION['allocation_use_live_api'] = $useLiveApi;
                
                StandardResponse::success([
                    'mode' => $useLiveApi ? 'live_api' : 'database',
                    'use_live_api' => $useLiveApi,
                    'message' => $useLiveApi 
                        ? 'Now using Live API (slow, accurate)' 
                        : 'Now using Database (fast - 100x)'
                ]);
                break;
            
            // GET: Get Current Allocation Mode
            case 'get_allocation_mode':
                $useLiveApi = $_SESSION['allocation_use_live_api'] ?? false;
                StandardResponse::success([
                    'use_live_api' => $useLiveApi,
                    'mode' => $useLiveApi ? 'live_api' : 'database',
                    'description' => $useLiveApi 
                        ? 'Fetching sales from Vend API (slow, real-time)' 
                        : 'Fetching sales from local database (fast)'
                ]);
                break;
            
            // POST: Process Payment
            case 'process_payment':
                $customerId = $_POST['customer_id'] ?? '';
                $amount = floatval($_POST['amount'] ?? 0);
                $note = $_POST['note'] ?? '';
                
                if (empty($customerId) || $amount <= 0) {
                    StandardResponse::error('Invalid payment parameters');
                    break;
                }
                
                $result = PaymentService::applyFailedPayment($customerId, $amount, $note);
                if ($result['success']) {
                    StandardResponse::success(['message' => 'Payment processed successfully']);
                } else {
                    StandardResponse::error($result['error']);
                }
                break;
            
            // POST: Apply Failed Payment to Vend
            case 'apply_failed_to_vend':
                $vendCustomerId = $_POST['vend_customer_id'] ?? '';
                
                if (empty($vendCustomerId)) {
                    StandardResponse::error('Customer ID is required');
                    break;
                }
                
                // Get failed payment amount for this customer
                $allocationService = new PaymentAllocationService($pdo);
                $failedPayments = $allocationService->getFailedDeductions();
                $customerPayment = array_filter($failedPayments, function($p) use ($vendCustomerId) {
                    return $p['customer_id'] === $vendCustomerId;
                });
                
                if (empty($customerPayment)) {
                    StandardResponse::error('No failed payments found for this customer');
                    break;
                }
                
                $payment = reset($customerPayment);
                $amount = $payment['amount'];
                
                $result = PaymentService::applyFailedPayment($vendCustomerId, $amount, 'Failed payment recovery');
                
                if ($result['success']) {
                    StandardResponse::success(['message' => sprintf(
                        'Applied $%.2f to Vend account successfully',
                        $amount
                    )]);
                } else {
                    StandardResponse::error($result['error']);
                }
                break;
            
            // POST: Apply All Failed Payments
            case 'apply_all_failed':
                $allocationService = new PaymentAllocationService($pdo);
                $failedPayments = $allocationService->getFailedDeductions();
                
                $successful = 0;
                $failed = 0;
                $errors = [];
                
                foreach ($failedPayments as $payment) {
                    $result = PaymentService::applyFailedPayment(
                        $payment['vend_customer_id'],
                        $payment['total_failed_amount'],
                        'Bulk failed payment recovery'
                    );
                    
                    if ($result['success']) {
                        $successful++;
                    } else {
                        $failed++;
                        $errors[] = $payment['user_name'] . ': ' . $result['error'];
                    }
                    
                    // Small delay to avoid API rate limits
                    usleep(500000); // 0.5 seconds
                }
                
                StandardResponse::success([
                    'total' => count($failedPayments),
                    'successful' => $successful,
                    'failed' => $failed,
                    'errors' => $errors
                ]);
                break;
            
            // ========================================================================
            // NEW API ENDPOINTS - Xero Payroll & Payment Allocation
            // ========================================================================
            
            // POST: Sync Payrolls from Xero
            case 'sync_payrolls':
                try {
                    global $payrollNzApi, $xeroTenantId;
                    
                    if (!$payrollNzApi || !$xeroTenantId) {
                        throw new \Exception('Xero API not initialized');
                    }
                    
                    $xeroService = new XeroPayrollService($pdo, $payrollNzApi, $xeroTenantId);
                    $result = $xeroService->syncPayrollsFromXero(12); // Last 12 weeks
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] sync_payrolls error: ' . $e->getMessage());
                    StandardResponse::error('Failed to sync payrolls: ' . $e->getMessage());
                }
                break;
            
            // GET: Pending Deductions
            case 'get_pending_deductions':
                try {
                    $allocationService = new \CIS\Modules\StaffAccounts\PaymentAllocationService($pdo);
                    $customerId = $_GET['customer_id'] ?? null;
                    $pending = $allocationService->getPendingDeductions($customerId);
                    StandardResponse::success(['deductions' => $pending]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_pending_deductions error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load pending deductions: ' . $e->getMessage());
                }
                break;
            
            // GET: Pending Deductions Summary
            case 'get_pending_deductions_summary':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $summary = $allocationService->getPendingDeductionsSummary();
                    StandardResponse::success(['summary' => $summary]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_pending_deductions_summary error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load summary: ' . $e->getMessage());
                }
                break;
            
            // GET: Missed Payments
            case 'get_missed_payments':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $missed = $allocationService->getMissedPayments();
                    StandardResponse::success(['missed' => $missed]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_missed_payments error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load missed payments: ' . $e->getMessage());
                }
                break;
            
            // POST: Retry Failed Deduction
            case 'retry_failed_deduction':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $id = intval($_POST['id'] ?? 0);
                    $userId = $_SESSION['userID'] ?? null;
                    
                    if ($id <= 0) {
                        StandardResponse::error('Invalid deduction ID');
                        break;
                    }
                    
                    $result = $allocationService->retryFailedDeduction($id, $userId);
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] retry_failed_deduction error: ' . $e->getMessage());
                    StandardResponse::error('Failed to retry: ' . $e->getMessage());
                }
                break;
            
            // POST: Retry All Failed for Customer
            case 'retry_all_failed':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $customerId = $_POST['customer_id'] ?? '';
                    $userId = $_SESSION['userID'] ?? null;
                    
                    if (empty($customerId)) {
                        StandardResponse::error('Customer ID is required');
                        break;
                    }
                    
                    $result = $allocationService->retryAllFailedForCustomer($customerId, $userId);
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] retry_all_failed error: ' . $e->getMessage());
                    StandardResponse::error('Failed to retry: ' . $e->getMessage());
                }
                break;
            
            // GET: Allocation Statistics
            case 'get_allocation_statistics':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $stats = $allocationService->getAllocationStatistics();
                    StandardResponse::success(['statistics' => $stats]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_allocation_statistics error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load statistics: ' . $e->getMessage());
                }
                break;
            
            // GET: Allocation Success Rate
            case 'get_allocation_success_rate':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $days = intval($_GET['days'] ?? 30);
                    $rate = $allocationService->getAllocationSuccessRate($days);
                    StandardResponse::success($rate);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_allocation_success_rate error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load success rate: ' . $e->getMessage());
                }
                break;
            
            // GET: Recent Allocations
            case 'get_recent_allocations':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $limit = intval($_GET['limit'] ?? 100);
                    $allocations = $allocationService->getRecentAllocations($limit);
                    StandardResponse::success(['allocations' => $allocations]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] get_recent_allocations error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load allocations: ' . $e->getMessage());
                }
                break;
            
            // GET: Reconcile All
            case 'reconcile_all':
                try {
                    $reconciliationService = new ReconciliationService($db);
                    $result = $reconciliationService->reconcileAll();
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] reconcile_all error: ' . $e->getMessage());
                    StandardResponse::error('Failed to reconcile: ' . $e->getMessage());
                }
                break;
            
            // GET: Reconcile Customer
            case 'reconcile_customer':
                try {
                    $reconciliationService = new ReconciliationService($db);
                    $customerId = $_GET['customer_id'] ?? '';
                    
                    if (empty($customerId)) {
                        StandardResponse::error('Customer ID is required');
                        break;
                    }
                    
                    $result = $reconciliationService->reconcileCustomer($customerId);
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] reconcile_customer error: ' . $e->getMessage());
                    StandardResponse::error('Failed to reconcile customer: ' . $e->getMessage());
                }
                break;
            
            // POST: Allocate Single Deduction
            case 'allocate_deduction':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $id = intval($_POST['id'] ?? 0);
                    $userId = $_SESSION['userID'] ?? null;
                    $dryRun = filter_var($_POST['dry_run'] ?? false, FILTER_VALIDATE_BOOLEAN);
                    
                    if ($id <= 0) {
                        StandardResponse::error('Invalid deduction ID');
                        break;
                    }
                    
                    // Set mode from session
                    $useLiveApi = $_SESSION['allocation_use_live_api'] ?? false;
                    $allocationService->setUseLiveApi($useLiveApi);
                    
                    $result = $allocationService->allocateDeduction($id, $userId, $dryRun);
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] allocate_deduction error: ' . $e->getMessage());
                    StandardResponse::error('Failed to allocate: ' . $e->getMessage());
                }
                break;
            
            // POST: Allocate All Pending
            case 'allocate_all_pending':
                try {
                    $allocationService = new PaymentAllocationService($pdo);
                    $userId = $_SESSION['userID'] ?? null;
                    
                    // Set mode from session
                    $useLiveApi = $_SESSION['allocation_use_live_api'] ?? false;
                    $allocationService->setUseLiveApi($useLiveApi);
                    
                    $result = $allocationService->allocateAllPending($userId);
                    StandardResponse::success($result);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] allocate_all_pending error: ' . $e->getMessage());
                    StandardResponse::error('Failed to allocate all: ' . $e->getMessage());
                }
                break;
            
            // ========================================================================
            // EMPLOYEE MAPPING API ENDPOINTS - Phase 1 Day 1
            // ========================================================================
            
            // GET: CSRF Token (for testing)
            case 'get-csrf-token':
                StandardResponse::success(['csrf_token' => $_SESSION['csrf_token']]);
                break;
            
            // GET: All Employee Mappings
            case 'employee-mappings':
                if ($_SERVER['REQUEST_METHOD'] === 'GET') {
                    try {
                        $mappingService = new EmployeeMappingService($pdo);
                        
                        // Build filters from query params
                        $filters = [];
                        if (isset($_GET['status'])) {
                            $filters['status'] = $_GET['status'];
                        }
                        if (isset($_GET['search'])) {
                            $filters['search'] = $_GET['search'];
                        }
                        if (isset($_GET['min_confidence'])) {
                            $filters['min_confidence'] = $_GET['min_confidence'];
                        }
                        if (isset($_GET['limit'])) {
                            $filters['limit'] = (int)$_GET['limit'];
                        }
                        if (isset($_GET['offset'])) {
                            $filters['offset'] = (int)$_GET['offset'];
                        }
                        
                        $mappings = $mappingService->getAllMappings($filters);
                        $stats = $mappingService->getStats();
                        
                        StandardResponse::success([
                            'mappings' => $mappings,
                            'stats' => $stats,
                            'count' => count($mappings)
                        ]);
                    } catch (\Exception $e) {
                        error_log('[STAFF-ACCOUNTS] employee-mappings GET error: ' . $e->getMessage());
                        StandardResponse::error('Failed to load mappings: ' . $e->getMessage());
                    }
                } 
                // POST: Create New Mapping
                elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {
                    try {
                        $mappingService = new EmployeeMappingService($pdo);
                        
                        // Get current user ID if available
                        $userId = $_SESSION['userID'] ?? null;
                        if ($userId) {
                            $_POST['mapped_by_user_id'] = $userId;
                        }
                        
                        $result = $mappingService->createMapping($_POST);
                        
                        if ($result['success']) {
                            StandardResponse::success($result);
                        } else {
                            StandardResponse::error($result['error'], 400);
                        }
                    } catch (\Exception $e) {
                        error_log('[STAFF-ACCOUNTS] employee-mappings POST error: ' . $e->getMessage());
                        StandardResponse::error('Failed to create mapping: ' . $e->getMessage());
                    }
                }
                // PUT: Update Existing Mapping
                elseif ($_SERVER['REQUEST_METHOD'] === 'PUT') {
                    try {
                        $mappingService = new EmployeeMappingService($pdo);
                        $id = intval($_GET['id'] ?? 0);
                        
                        if ($id <= 0) {
                            StandardResponse::error('Invalid mapping ID', 400);
                            break;
                        }
                        
                        $result = $mappingService->updateMapping($id, $_POST);
                        
                        if ($result['success']) {
                            StandardResponse::success($result);
                        } else {
                            StandardResponse::error($result['error'], 400);
                        }
                    } catch (\Exception $e) {
                        error_log('[STAFF-ACCOUNTS] employee-mappings PUT error: ' . $e->getMessage());
                        StandardResponse::error('Failed to update mapping: ' . $e->getMessage());
                    }
                }
                // DELETE: Delete Mapping
                elseif ($_SERVER['REQUEST_METHOD'] === 'DELETE') {
                    try {
                        $mappingService = new EmployeeMappingService($pdo);
                        $id = intval($_GET['id'] ?? 0);
                        
                        if ($id <= 0) {
                            StandardResponse::error('Invalid mapping ID', 400);
                            break;
                        }
                        
                        $result = $mappingService->deleteMapping($id);
                        
                        if ($result['success']) {
                            StandardResponse::success($result);
                        } else {
                            StandardResponse::error($result['error'], 404);
                        }
                    } catch (\Exception $e) {
                        error_log('[STAFF-ACCOUNTS] employee-mappings DELETE error: ' . $e->getMessage());
                        StandardResponse::error('Failed to delete mapping: ' . $e->getMessage());
                    }
                }
                break;
            
            // POST: Auto-Match Employees to Vend Customers
            case 'employee-mappings-auto-match':
                try {
                    $mappingService = new EmployeeMappingService($pdo);
                    
                    // Get unmapped employees
                    $unmapped = $mappingService->getUnmappedEmployees();
                    
                    // Find matches
                    $matches = $mappingService->autoMatchEmployees();
                    
                    StandardResponse::success([
                        'unmapped_count' => count($unmapped),
                        'matches_found' => count($matches),
                        'unmapped_employees' => $unmapped,
                        'suggested_matches' => $matches,
                        'message' => count($matches) > 0 
                            ? sprintf('Found %d potential matches. Review and confirm.', count($matches))
                            : 'No automatic matches found. Manual mapping required.'
                    ]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] employee-mappings-auto-match error: ' . $e->getMessage());
                    StandardResponse::error('Failed to auto-match: ' . $e->getMessage());
                }
                break;
            
            // GET: Unmapped Employees
            case 'employee-mappings-unmapped':
                try {
                    $mappingService = new EmployeeMappingService($pdo);
                    $unmapped = $mappingService->getUnmappedEmployees();
                    $stats = $mappingService->getStats();
                    
                    StandardResponse::success([
                        'unmapped_employees' => $unmapped,
                        'count' => count($unmapped),
                        'stats' => $stats
                    ]);
                } catch (\Exception $e) {
                    error_log('[STAFF-ACCOUNTS] employee-mappings-unmapped error: ' . $e->getMessage());
                    StandardResponse::error('Failed to load unmapped employees: ' . $e->getMessage());
                }
                break;
            
            default:
                StandardResponse::error('Unknown action', 400);
        }
    } catch (Exception $e) {
        error_log('Staff Accounts API Error: ' . $e->getMessage());
        StandardResponse::error('An error occurred processing your request');
    }
    
    exit;
}

// ============================================================================
// PAGE RENDERING BELOW THIS LINE
// ============================================================================

// Load template header
include ROOT_PATH . '/assets/template/html-header.php';
include ROOT_PATH . '/assets/template/header.php';
?>

<div class="app-body">
    <?php include ROOT_PATH . '/assets/template/sidemenu.php'; ?>
    
    <main class="main">
        <!-- Breadcrumb -->
        <ol class="breadcrumb">
            <li class="breadcrumb-item">Home</li>
            <li class="breadcrumb-item"><a href="#">Finance</a></li>
            <li class="breadcrumb-item active">Staff Account Management</li>
            <li class="breadcrumb-menu d-md-down-none">
                <?php include ROOT_PATH . '/assets/template/quick-product-search.php'; ?>
            </li>
        </ol>
        
        <div class="container-fluid">
            <div class="animated fadeIn">
                <div class="row">
                    <div class="col">
                        <div class="card">
                            <div class="card-header">
                                <h4 class="card-title mb-0">Staff Account Management Dashboard</h4>
                                <div class="small text-muted">Comprehensive management of Lightspeed accounts and Xero payroll integrations</div>
                            </div>
                            <div class="card-body">
                                
                                <!-- Statistics Grid -->
                                <div class="stats-grid">
                                    <div class="stat-card">
                                        <span class="stat-value" id="pending-deductions-count">-</span>
                                        <div class="stat-label">Pending Deductions</div>
                                        <div class="stat-sublabel" id="pending-deductions-amount">$0.00</div>
                                    </div>
                                    <div class="stat-card">
                                        <span class="stat-value" id="allocated-this-month-count">-</span>
                                        <div class="stat-label">Allocated This Month</div>
                                        <div class="stat-sublabel" id="allocated-this-month-amount">$0.00</div>
                                    </div>
                                    <div class="stat-card">
                                        <span class="stat-value" id="failed-allocations-count">-</span>
                                        <div class="stat-label">Failed Allocations</div>
                                        <div class="stat-sublabel" id="failed-allocations-amount">$0.00</div>
                                    </div>
                                    <div class="stat-card">
                                        <span class="stat-value" id="success-rate-percentage">-</span>
                                        <div class="stat-label">Success Rate (30d)</div>
                                        <div class="stat-sublabel" id="success-rate-ratio">- / -</div>
                                    </div>
                                </div>
                                
                                <!-- Mode Toggle Switch -->
                                <div class="mode-toggle-container" style="margin: 20px 0; padding: 15px; background: #f8f9fa; border-radius: 8px; border: 1px solid #dee2e6;">
                                    <div style="display: flex; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 15px;">
                                        <div>
                                            <strong style="font-size: 14px;">Data Fetch Mode:</strong>
                                            <div style="font-size: 12px; color: #666; margin-top: 4px;">
                                                Choose how to fetch open sales for allocation
                                            </div>
                                        </div>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-primary" id="mode-db" onclick="setAllocationMode('db')" style="border-radius: 4px 0 0 4px;">
                                                📊 Database (Fast)
                                            </button>
                                            <button type="button" class="btn btn-outline-primary" id="mode-api" onclick="setAllocationMode('api')" style="border-radius: 0 4px 4px 0;">
                                                🌐 API (Accurate)
                                            </button>
                                        </div>
                                        <div id="mode-status" style="font-size: 12px; color: #28a745; font-weight: 500;">
                                            ✅ Using Database mode (100x faster)
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Tab Navigation -->
                                <div class="tabs">
                                    <button class="tab active" data-tab="payroll-deductions">Payroll Deductions</button>
                                    <button class="tab" data-tab="missed-payments">Missed Payments</button>
                                    <button class="tab" data-tab="reconciliation">Reconciliation</button>
                                    <button class="tab" data-tab="employee-mapping">Employee Mapping</button>
                                    <button class="tab" data-tab="allocation-log">Allocation Log</button>
                                    <button class="tab" data-tab="statistics">Statistics</button>
                                    <button class="tab" data-tab="api-debug">API Debug</button>
                                </div>
                                
                                <!-- Payroll Deductions Tab (REPLACES Staff Overview) -->
                                <div class="tab-content active" id="payroll-deductions">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Payroll Deductions - Pending Allocation</h3>
                                            <div class="card-actions">
                                                <span id="last-sync-time" style="font-size: 12px; color: #666; margin-right: 15px;">Last Sync: Never</span>
                                                <button class="btn btn-primary" onclick="syncFromXero()">
                                                    <i class="fa fa-sync"></i> Sync from Xero
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <button class="btn btn-success" onclick="allocateAllPending()">Allocate All Pending</button>
                                                <input type="text" class="form-control" id="deductions-search" placeholder="Search by employee name or customer ID..." style="max-width: 400px;">
                                            </div>
                                            <div class="table-container">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Employee Name</th>
                                                            <th>Customer ID</th>
                                                            <th>Pay Period</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="deductions-table-body">
                                                        <tr><td colspan="6" class="text-center" style="padding: 40px;">Loading pending deductions...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Missed Payments Tab (REPLACES Failed Payments) -->
                                <div class="tab-content" id="missed-payments">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Missed Payments - Failed Allocations</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <button class="btn btn-danger" onclick="retryAllFailed()">Retry All Failed</button>
                                                <input type="text" class="form-control" id="failed-search" placeholder="Search by employee..." style="max-width: 400px;">
                                            </div>
                                            <div class="table-container">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Employee Name</th>
                                                            <th>Customer ID</th>
                                                            <th>Amount</th>
                                                            <th>Failed Date</th>
                                                            <th>Reason</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="failed-table-body">
                                                        <tr><td colspan="6" class="text-center" style="padding: 40px;">Loading failed allocations...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Reconciliation Tab (REPLACES Snapshot Analysis) -->
                                <div class="tab-content" id="reconciliation">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Payroll Reconciliation - Xero vs Vend</h3>
                                            <div class="card-actions">
                                                <button class="btn btn-primary" onclick="reconcileAll()">
                                                    <i class="fa fa-sync"></i> Reconcile All
                                                </button>
                                                <button class="btn btn-secondary" onclick="exportDiscrepancies()">
                                                    <i class="fa fa-download"></i> Export Discrepancies
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div style="margin-bottom: 15px;">
                                                <label>Date Range:</label>
                                                <select id="reconcile-range" class="form-control" style="width: 200px; display: inline-block; margin-left: 10px;">
                                                    <option value="7">Last 7 days</option>
                                                    <option value="30" selected>Last 30 days</option>
                                                    <option value="90">Last 90 days</option>
                                                    <option value="365">Last year</option>
                                                </select>
                                            </div>
                                            <div class="table-container">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Employee Name</th>
                                                            <th>Xero Total Deductions</th>
                                                            <th>Vend Balance</th>
                                                            <th>Difference</th>
                                                            <th>Status</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="reconciliation-table-body">
                                                        <tr><td colspan="5" class="text-center" style="padding: 40px;">Click "Reconcile All" to start...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Employee Mapping Tab (NEW) -->
                                <div class="tab-content" id="employee-mapping">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Employee Mapping - Xero to Vend</h3>
                                            <div class="card-actions">
                                                <button class="btn btn-primary" onclick="showAddMappingModal()">
                                                    <i class="fa fa-plus"></i> Add Mapping
                                                </button>
                                                <button class="btn btn-secondary" onclick="autoMatch()">
                                                    <i class="fa fa-magic"></i> Auto-Match by Email
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-container">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Xero Employee</th>
                                                            <th>Vend Customer ID</th>
                                                            <th>Vend Customer Name</th>
                                                            <th>Status</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="mapping-table-body">
                                                        <tr><td colspan="5" class="text-center" style="padding: 40px;">Loading employee mappings...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Allocation Log Tab (REPLACES Payment History) -->
                                <div class="tab-content" id="allocation-log">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Allocation Activity Log</h3>
                                            <div class="card-actions">
                                                <button class="btn btn-secondary" onclick="exportAllocationLog()">
                                                    <i class="fa fa-download"></i> Export CSV
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="table-container">
                                                <table class="table table-hover">
                                                    <thead>
                                                        <tr>
                                                            <th>Date/Time</th>
                                                            <th>Employee</th>
                                                            <th>Amount</th>
                                                            <th>Status</th>
                                                            <th>Details</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="allocation-log-body">
                                                        <tr><td colspan="5" class="text-center" style="padding: 40px;">Loading allocation log...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Statistics Tab (NEW) -->
                                <div class="tab-content" id="statistics">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Statistics & Performance Reports</h3>
                                            <div class="card-actions">
                                                <button class="btn btn-primary" onclick="exportStatistics()">
                                                    <i class="fa fa-download"></i> Export Report
                                                </button>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div style="margin-bottom: 30px;">
                                                <h5>Success Rate (Last 30 Days)</h5>
                                                <div class="progress" style="height: 30px;">
                                                    <div class="progress-bar bg-success" id="success-rate-bar" style="width: 0%;">0%</div>
                                                </div>
                                                <div id="success-rate-details" style="margin-top: 10px; font-size: 14px; color: #666;"></div>
                                            </div>
                                            
                                            <div style="margin-bottom: 30px;">
                                                <h5>Allocation by Status</h5>
                                                <div id="allocation-by-status"></div>
                                            </div>
                                            
                                            <div>
                                                <h5>Monthly Trends</h5>
                                                <div id="monthly-trends-chart" style="height: 300px; background: #f8f9fa; border-radius: 8px; padding: 20px; text-align: center; line-height: 260px; color: #999;">
                                                    Chart will be displayed here
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Staff Overview Tab -->
                                <div class="tab-content" id="staff-overview" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">All Staff Accounts</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <input type="text" class="search-input" id="staff-search" placeholder="Search staff by name or email...">
                                                <button class="btn btn-primary" onclick="loadStaffAccounts()">Refresh</button>
                                            </div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>Staff Member</th>
                                                            <th>Email</th>
                                                            <th>Customer Code</th>
                                                            <th>Current Balance</th>
                                                            <th>Status</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="staff-table-body">
                                                        <tr><td colspan="6" class="loading">Click a tab above to load data...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Failed Payments Tab (DEPRECATED - Hidden, replaced by Missed Payments) -->
                                <div class="tab-content" id="failed-payments" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Failed Payments - Last 3 Weeks</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <button class="btn btn-warning" onclick="loadFailedPayments()">Refresh Failed Payments</button>
                                                <button class="btn btn-danger" onclick="applyAllFailedPayments()">Apply All to Vend</button>
                                            </div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>Staff Member</th>
                                                            <th>Failed Count</th>
                                                            <th>Total Failed Amount</th>
                                                            <th>Most Recent Failure</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="failed-payments-table-body">
                                                        <tr><td colspan="5" class="loading">Loading failed payments...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Manual Payments Tab (DEPRECATED - Hidden) -->
                                <div class="tab-content" id="manual-payments" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Manual Account Payments</h3>
                                            <p class="text-muted">Hamilton East Register - Internet Banking / POLi</p>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <select id="manual-payment-days" class="form-control" style="width: 200px; display: inline-block;">
                                                    <option value="7">Last 7 days</option>
                                                    <option value="21" selected>Last 21 days</option>
                                                    <option value="30">Last 30 days</option>
                                                </select>
                                                <button class="btn btn-primary" onclick="loadManualPayments()">Refresh Manual Payments</button>
                                            </div>
                                            <div id="manual-payments-summary" style="margin: 15px 0;"></div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>Sale Date</th>
                                                            <th>Customer</th>
                                                            <th>Customer Code</th>
                                                            <th>Amount</th>
                                                            <th>Payment Type</th>
                                                            <th>Register</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="manual-payments-table-body">
                                                        <tr><td colspan="7" class="loading">Click a tab above to load data...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Payment History Tab (DEPRECATED - Hidden, replaced by Allocation Log) -->
                                <div class="tab-content" id="payment-history" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Payment History</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <select class="search-input" id="history-user-select">
                                                    <option value="">Select staff member...</option>
                                                </select>
                                                <button class="btn btn-primary" onclick="loadPaymentHistory()">Load History</button>
                                            </div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>Date</th>
                                                            <th>Type</th>
                                                            <th>Amount</th>
                                                            <th>Description</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="payment-history-table-body">
                                                        <tr><td colspan="4" class="loading">Select a staff member...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Transaction Search Tab (DEPRECATED - Hidden) -->
                                <div class="tab-content" id="transaction-search" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Transaction Search</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <input type="text" class="search-input" id="transaction-search-term" placeholder="Search transactions...">
                                                <select class="search-input" id="search-user-select">
                                                    <option value="">All users</option>
                                                </select>
                                                <button class="btn btn-primary" onclick="searchTransactions()">Search</button>
                                            </div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>User</th>
                                                            <th>Date</th>
                                                            <th>Type</th>
                                                            <th>Amount</th>
                                                            <th>Description</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="search-results-table-body">
                                                        <tr><td colspan="5" class="loading">Enter search criteria...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Snapshot Analysis Tab (DEPRECATED - Hidden, replaced by Reconciliation) -->
                                <div class="tab-content" id="snapshot-analysis" style="display: none;">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">Snapshot Analysis</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <button class="btn btn-primary" onclick="loadSnapshots()">Refresh Snapshots</button>
                                            </div>
                                            <div class="table-container">
                                                <table class="table">
                                                    <thead>
                                                        <tr>
                                                            <th>Date</th>
                                                            <th>Total Employees</th>
                                                            <th>Total Deductions</th>
                                                            <th>Total Amount</th>
                                                            <th>Failed Payments</th>
                                                            <th>Actions</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="snapshots-table-body">
                                                        <tr><td colspan="6" class="loading">Click a tab above to load data...</td></tr>
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- API Debug Tab -->
                                <div class="tab-content" id="api-debug">
                                    <div class="card">
                                        <div class="card-header">
                                            <h3 class="card-title">API Integration Debug</h3>
                                        </div>
                                        <div class="card-body">
                                            <div class="search-bar">
                                                <button class="btn btn-primary" onclick="testAPIConnections()">Test All APIs</button>
                                                <button class="btn btn-warning" onclick="debugVendToken()">Debug Vend Token</button>
                                                <button class="btn btn-success" onclick="debugXeroConnection()">Debug Xero</button>
                                            </div>
                                            
                                            <div style="margin-top: 20px;">
                                                <h5>API Status</h5>
                                                <div style="display: flex; gap: 20px; margin: 15px 0;">
                                                    <div>
                                                        <strong>Vend API:</strong>
                                                        <span id="vend-api-status" class="badge badge-secondary">Not tested</span>
                                                    </div>
                                                    <div>
                                                        <strong>Xero API:</strong>
                                                        <span id="xero-api-status" class="badge badge-secondary">Not tested</span>
                                                    </div>
                                                </div>
                                            </div>
                                            
                                            <div style="margin-top: 20px;">
                                                <h5>Vend Token Debug</h5>
                                                <div id="vend-token-output" style="background: #f8f9fa; padding: 15px; border-radius: 6px; min-height: 100px;">
                                                    Click "Debug Vend Token" to see details...
                                                </div>
                                            </div>
                                            
                                            <div style="margin-top: 20px;">
                                                <h5>Xero Connection Debug</h5>
                                                <div id="xero-connection-output" style="background: #f8f9fa; padding: 15px; border-radius: 6px; min-height: 100px;">
                                                    Click "Debug Xero" to see details...
                                                </div>
                                            </div>
                                            
                                            <div style="margin-top: 20px;">
                                                <h5>Test Customer Balance</h5>
                                                <div style="display: flex; gap: 12px; align-items: center;">
                                                    <input type="text" id="test-customer-id" class="form-control" placeholder="Enter Vend Customer ID..." style="flex: 1; max-width: 300px;">
                                                    <button class="btn btn-primary" onclick="testCustomerBalance()">Get Balance</button>
                                                </div>
                                                <div id="balance-test-output" style="margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 6px; min-height: 50px;"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>
</div>

<!-- Payment Processing Modal -->
<div class="modal" id="payment-modal" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Process Payment</h4>
                <button type="button" class="close" onclick="closeModal()">&times;</button>
            </div>
            <div class="modal-body">
                <div id="modal-customer-info"></div>
                <div class="form-group">
                    <label class="form-label">Amount</label>
                    <input type="number" class="form-control" id="payment-amount" step="0.01">
                </div>
                <div class="form-group">
                    <label class="form-label">Note</label>
                    <textarea class="form-control" id="payment-note" rows="3"></textarea>
                </div>
                <input type="hidden" id="payment-customer-id">
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="processPayment()">Process Payment</button>
                <button class="btn btn-secondary" onclick="closeModal()">Cancel</button>
            </div>
        </div>
    </div>
</div>

<!-- Include Module CSS -->
<link rel="stylesheet" href="<?= BASE_URL ?>/modules/staff-accounts/css/staff-accounts.css">

<!-- Include Shared Error Handler (MUST LOAD FIRST) -->
<script src="<?= BASE_URL ?>/modules/shared/js/error-handler.js"></script>

<!-- Include Module JavaScript -->
<script>
    // Inject CSRF Token
    const CSRF_TOKEN = '<?= htmlspecialchars($csrf_token, ENT_QUOTES) ?>';
</script>
<script src="<?= BASE_URL ?>/modules/staff-accounts/js/staff-accounts.js?v=<?= time() ?>"></script>
<script src="<?= BASE_URL ?>/modules/staff-accounts/js/staff-accounts-tables.js?v=<?= time() ?>"></script>

<?php
// Load template footer
include ROOT_PATH . '/assets/template/html-footer.php';
?>
