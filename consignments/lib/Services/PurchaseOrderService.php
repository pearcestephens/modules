<?php
declare(strict_types=1);

/**
 * Purchase Order Service
 *
 * Core business logic for Purchase Order management within the consignments system.
 * Uses vend_consignments table with transfer_category='PURCHASE_ORDER'.
 *
 * Key Responsibilities:
 * - Create/update/delete purchase orders
 * - Manage PO line items
 * - State transitions (DRAFT → PENDING_APPROVAL → APPROVED → SENT → RECEIVED)
 * - Integration with Lightspeed consignment API
 * - Validation and business rules enforcement
 *
 * @package CIS\Consignments\Services
 * @version 1.0.0
 */

namespace CIS\Consignments\Services;

use PDO;
use PDOException;
use RuntimeException;
use InvalidArgumentException;

class PurchaseOrderService
{
    private PDO $pdo;

    /**
     * Valid PO states
     */
    private const VALID_STATES = [
        'DRAFT',
        'OPEN',              // Synonym for PENDING_APPROVAL in legacy system
        'PACKING',           // Being prepared
        'PACKAGED',          // Ready to send
        'SENT',              // Sent to supplier
        'RECEIVING',         // Receiving goods
        'PARTIAL',           // Partially received
        'RECEIVED',          // Fully received
        'CLOSED',            // Completed
        'CANCELLED',         // Cancelled
        'ARCHIVED'           // Archived
    ];

    /**
     * Constructor
     *
     * @param PDO $pdo Database connection
     */
    public function __construct(PDO $pdo)
    {
        $this->pdo = $pdo;
    }

    /**
     * Create a new purchase order
     *
     * @param array $data Purchase order data
     *   Required keys:
     *     - outlet_to: Destination outlet UUID
     *     - supplier_id: Supplier UUID
     *     - created_by: User ID creating the PO
     *   Optional keys:
     *     - outlet_from: Source outlet (defaults to supplier warehouse)
     *     - expected_delivery_date: Expected delivery date
     *     - supplier_reference: Supplier's reference number
     *     - consignment_notes: Internal notes
     *
     * @return int Purchase order ID (vend_consignments.id)
     * @throws InvalidArgumentException If required data missing
     * @throws RuntimeException If creation fails
     */
    public function create(array $data): int
    {
        // Validate required fields
        $this->validateRequired($data, ['outlet_to', 'supplier_id', 'created_by']);

        // Start transaction
        $this->pdo->beginTransaction();

        try {
            // Generate public_id (will be auto-generated by trigger, but we can provide prefix)
            $publicId = null; // Let trigger handle it

            // Insert into vend_consignments
            $stmt = $this->pdo->prepare("
                INSERT INTO vend_consignments (
                    transfer_category,
                    outlet_from,
                    outlet_to,
                    supplier_id,
                    created_by,
                    state,
                    expected_delivery_date,
                    supplier_reference,
                    consignment_notes,
                    created_at,
                    updated_at
                ) VALUES (
                    'PURCHASE_ORDER',
                    :outlet_from,
                    :outlet_to,
                    :supplier_id,
                    :created_by,
                    'DRAFT',
                    :expected_delivery_date,
                    :supplier_reference,
                    :notes,
                    NOW(),
                    NOW()
                )
            ");

            $stmt->execute([
                ':outlet_from' => $data['outlet_from'] ?? $data['outlet_to'], // Default to same as destination
                ':outlet_to' => $data['outlet_to'],
                ':supplier_id' => $data['supplier_id'],
                ':created_by' => (int)$data['created_by'],
                ':expected_delivery_date' => $data['expected_delivery_date'] ?? null,
                ':supplier_reference' => $data['supplier_reference'] ?? null,
                ':notes' => $data['consignment_notes'] ?? null
            ]);

            $poId = (int)$this->pdo->lastInsertId();

            // Log creation in audit log
            $this->logAudit($poId, 'create', 'DRAFT', [
                'actor_id' => $data['created_by'],
                'actor_type' => 'user'
            ]);

            $this->pdo->commit();

            return $poId;

        } catch (PDOException $e) {
            $this->pdo->rollBack();
            throw new RuntimeException("Failed to create purchase order: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Get purchase order by ID
     *
     * @param int $id Purchase order ID
     * @return object|null Purchase order object or null if not found
     */
    public function get(int $id): ?object
    {
        $stmt = $this->pdo->prepare("
            SELECT
                vc.*,
                vo_from.name AS outlet_from_name,
                vo_to.name AS outlet_to_name,
                vs.name AS supplier_name,
                vs.email AS supplier_email,
                u.full_name AS created_by_name,
                COUNT(DISTINCT vcli.id) AS line_item_count,
                COALESCE(SUM(vcli.quantity), 0) AS total_quantity,
                COALESCE(SUM(vcli.total_cost), 0) AS total_amount
            FROM vend_consignments vc
            LEFT JOIN vend_outlets vo_from ON vc.outlet_from = vo_from.id
            LEFT JOIN vend_outlets vo_to ON vc.outlet_to = vo_to.id
            LEFT JOIN vend_suppliers vs ON vc.supplier_id = vs.id
            LEFT JOIN users u ON vc.created_by = u.id
            LEFT JOIN vend_consignment_line_items vcli ON vc.id = vcli.transfer_id
            WHERE vc.id = :id
              AND vc.transfer_category = 'PURCHASE_ORDER'
              AND vc.deleted_at IS NULL
            GROUP BY vc.id
        ");

        $stmt->execute([':id' => $id]);
        $result = $stmt->fetch(PDO::FETCH_OBJ);

        return $result ?: null;
    }

    /**
     * List purchase orders with filters
     *
     * @param array $filters Filter criteria
     *   - state: Filter by state (or array of states)
     *   - outlet_to: Filter by destination outlet
     *   - supplier_id: Filter by supplier
     *   - created_by: Filter by creator
     *   - date_from: Created after this date
     *   - date_to: Created before this date
     *   - search: Search in public_id, supplier_reference, notes
     * @param int $limit Number of results per page
     * @param int $offset Offset for pagination
     * @return array Array of purchase order objects
     */
    public function list(array $filters = [], int $limit = 50, int $offset = 0): array
    {
        $where = ["vc.transfer_category = 'PURCHASE_ORDER'", "vc.deleted_at IS NULL"];
        $params = [];

        // Apply filters
        if (!empty($filters['state'])) {
            if (is_array($filters['state'])) {
                $placeholders = implode(',', array_fill(0, count($filters['state']), '?'));
                $where[] = "vc.state IN ($placeholders)";
                $params = array_merge($params, $filters['state']);
            } else {
                $where[] = "vc.state = ?";
                $params[] = $filters['state'];
            }
        }

        if (!empty($filters['outlet_to'])) {
            $where[] = "vc.outlet_to = ?";
            $params[] = $filters['outlet_to'];
        }

        if (!empty($filters['supplier_id'])) {
            $where[] = "vc.supplier_id = ?";
            $params[] = $filters['supplier_id'];
        }

        if (!empty($filters['created_by'])) {
            $where[] = "vc.created_by = ?";
            $params[] = (int)$filters['created_by'];
        }

        if (!empty($filters['date_from'])) {
            $where[] = "vc.created_at >= ?";
            $params[] = $filters['date_from'];
        }

        if (!empty($filters['date_to'])) {
            $where[] = "vc.created_at <= ?";
            $params[] = $filters['date_to'];
        }

        if (!empty($filters['search'])) {
            $where[] = "(vc.public_id LIKE ? OR vc.supplier_reference LIKE ? OR vc.consignment_notes LIKE ?)";
            $searchTerm = '%' . $filters['search'] . '%';
            $params[] = $searchTerm;
            $params[] = $searchTerm;
            $params[] = $searchTerm;
        }

        $whereClause = implode(' AND ', $where);

        $sql = "
            SELECT
                vc.id,
                vc.public_id,
                vc.state,
                vc.outlet_from,
                vc.outlet_to,
                vc.supplier_id,
                vc.expected_delivery_date,
                vc.created_at,
                vc.updated_at,
                vo_from.name AS outlet_from_name,
                vo_to.name AS outlet_to_name,
                vs.name AS supplier_name,
                u.full_name AS created_by_name,
                COUNT(DISTINCT vcli.id) AS line_item_count,
                COALESCE(SUM(vcli.quantity), 0) AS total_quantity,
                COALESCE(SUM(vcli.total_cost), 0) AS total_amount
            FROM vend_consignments vc
            LEFT JOIN vend_outlets vo_from ON vc.outlet_from = vo_from.id
            LEFT JOIN vend_outlets vo_to ON vc.outlet_to = vo_to.id
            LEFT JOIN vend_suppliers vs ON vc.supplier_id = vs.id
            LEFT JOIN users u ON vc.created_by = u.id
            LEFT JOIN vend_consignment_line_items vcli ON vc.id = vcli.transfer_id
            WHERE $whereClause
            GROUP BY vc.id
            ORDER BY vc.created_at DESC
            LIMIT ? OFFSET ?
        ";

        $params[] = $limit;
        $params[] = $offset;

        $stmt = $this->pdo->prepare($sql);
        $stmt->execute($params);

        return $stmt->fetchAll(PDO::FETCH_OBJ);
    }

    /**
     * Update purchase order
     *
     * @param int $id Purchase order ID
     * @param array $data Data to update
     * @return bool Success
     * @throws RuntimeException If update fails
     */
    public function update(int $id, array $data): bool
    {
        // Get current PO to verify it exists and is editable
        $po = $this->get($id);
        if (!$po) {
            throw new InvalidArgumentException("Purchase order not found: $id");
        }

        // Only DRAFT and OPEN state POs can be edited
        if (!in_array($po->state, ['DRAFT', 'OPEN'])) {
            throw new RuntimeException("Cannot edit purchase order in '{$po->state}' state");
        }

        // Build update fields
        $fields = [];
        $params = [];

        $allowedFields = [
            'outlet_to',
            'supplier_id',
            'expected_delivery_date',
            'supplier_reference',
            'consignment_notes'
        ];

        foreach ($allowedFields as $field) {
            if (array_key_exists($field, $data)) {
                $fields[] = "$field = :$field";
                $params[":$field"] = $data[$field];
            }
        }

        if (empty($fields)) {
            return true; // Nothing to update
        }

        $fields[] = "updated_at = NOW()";
        $params[':id'] = $id;

        try {
            $sql = "UPDATE vend_consignments SET " . implode(', ', $fields) . " WHERE id = :id";
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute($params);

            // Log update
            $this->logAudit($id, 'update', $po->state, [
                'fields_updated' => array_keys($params)
            ]);

            return true;

        } catch (PDOException $e) {
            throw new RuntimeException("Failed to update purchase order: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Change purchase order state
     *
     * @param int $id Purchase order ID
     * @param string $newState New state
     * @param int $userId User making the change
     * @param string|null $notes Optional notes
     * @return bool Success
     * @throws InvalidArgumentException If state invalid
     * @throws RuntimeException If state transition not allowed
     */
    public function changeState(int $id, string $newState, int $userId, ?string $notes = null): bool
    {
        // Validate state
        if (!in_array($newState, self::VALID_STATES)) {
            throw new InvalidArgumentException("Invalid state: $newState");
        }

        // Get current PO
        $po = $this->get($id);
        if (!$po) {
            throw new InvalidArgumentException("Purchase order not found: $id");
        }

        // Validate state transition
        if (!$this->isValidStateTransition($po->state, $newState)) {
            throw new RuntimeException("Cannot transition from '{$po->state}' to '$newState'");
        }

        $this->pdo->beginTransaction();

        try {
            // Update state
            $stmt = $this->pdo->prepare("
                UPDATE vend_consignments
                SET state = :new_state,
                    updated_at = NOW()
                WHERE id = :id
            ");

            $stmt->execute([
                ':new_state' => $newState,
                ':id' => $id
            ]);

            // Set sent_at/received_at timestamps if applicable
            if ($newState === 'SENT' && empty($po->sent_at)) {
                $this->pdo->prepare("UPDATE vend_consignments SET sent_at = NOW() WHERE id = ?")->execute([$id]);
            }

            if ($newState === 'RECEIVED' && empty($po->received_at)) {
                $this->pdo->prepare("UPDATE vend_consignments SET received_at = NOW() WHERE id = ?")->execute([$id]);
            }

            // Log state change
            $this->logAudit($id, 'state_change', $newState, [
                'old_state' => $po->state,
                'new_state' => $newState,
                'actor_id' => $userId,
                'actor_type' => 'user',
                'notes' => $notes
            ]);

            $this->pdo->commit();

            return true;

        } catch (PDOException $e) {
            $this->pdo->rollBack();
            throw new RuntimeException("Failed to change state: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Soft delete purchase order
     *
     * @param int $id Purchase order ID
     * @param int $userId User deleting the PO
     * @return bool Success
     */
    public function delete(int $id, int $userId): bool
    {
        $po = $this->get($id);
        if (!$po) {
            return false;
        }

        // Only DRAFT state POs can be deleted
        if ($po->state !== 'DRAFT') {
            throw new RuntimeException("Can only delete DRAFT purchase orders");
        }

        try {
            $stmt = $this->pdo->prepare("
                UPDATE vend_consignments
                SET deleted_at = NOW(),
                    deleted_by = :user_id,
                    updated_at = NOW()
                WHERE id = :id
            ");

            $stmt->execute([
                ':user_id' => $userId,
                ':id' => $id
            ]);

            $this->logAudit($id, 'delete', 'DELETED', [
                'actor_id' => $userId,
                'actor_type' => 'user'
            ]);

            return true;

        } catch (PDOException $e) {
            throw new RuntimeException("Failed to delete purchase order: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Add line item to purchase order
     *
     * @param int $poId Purchase order ID
     * @param array $item Line item data
     *   Required: product_id, quantity
     *   Optional: unit_cost, notes
     * @return int Line item ID
     */
    public function addLineItem(int $poId, array $item): int
    {
        $this->validateRequired($item, ['product_id', 'quantity']);

        // Verify PO exists and is editable
        $po = $this->get($poId);
        if (!$po) {
            throw new InvalidArgumentException("Purchase order not found: $poId");
        }

        if (!in_array($po->state, ['DRAFT', 'OPEN'])) {
            throw new RuntimeException("Cannot add items to PO in '{$po->state}' state");
        }

        // Get product details
        $product = $this->getProduct($item['product_id']);
        if (!$product) {
            throw new InvalidArgumentException("Product not found: " . $item['product_id']);
        }

        try {
            $stmt = $this->pdo->prepare("
                INSERT INTO vend_consignment_line_items (
                    transfer_id,
                    product_id,
                    sku,
                    name,
                    quantity,
                    unit_cost,
                    total_cost,
                    notes,
                    status,
                    created_at,
                    updated_at
                ) VALUES (
                    :transfer_id,
                    :product_id,
                    :sku,
                    :name,
                    :quantity,
                    :unit_cost,
                    :total_cost,
                    :notes,
                    'pending',
                    NOW(),
                    NOW()
                )
            ");

            $quantity = (int)$item['quantity'];
            $unitCost = (float)($item['unit_cost'] ?? $product->cost ?? 0);
            $totalCost = $quantity * $unitCost;

            $stmt->execute([
                ':transfer_id' => $poId,
                ':product_id' => $item['product_id'],
                ':sku' => $product->sku,
                ':name' => $product->name,
                ':quantity' => $quantity,
                ':unit_cost' => $unitCost,
                ':total_cost' => $totalCost,
                ':notes' => $item['notes'] ?? null
            ]);

            $lineItemId = (int)$this->pdo->lastInsertId();

            // Update PO totals
            $this->updateTotals($poId);

            return $lineItemId;

        } catch (PDOException $e) {
            throw new RuntimeException("Failed to add line item: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Update line item
     *
     * @param int $lineItemId Line item ID
     * @param array $data Data to update
     * @return bool Success
     */
    public function updateLineItem(int $lineItemId, array $data): bool
    {
        // Get line item and verify PO is editable
        $stmt = $this->pdo->prepare("
            SELECT vcli.*, vc.state
            FROM vend_consignment_line_items vcli
            JOIN vend_consignments vc ON vcli.transfer_id = vc.id
            WHERE vcli.id = ?
        ");
        $stmt->execute([$lineItemId]);
        $lineItem = $stmt->fetch(PDO::FETCH_OBJ);

        if (!$lineItem) {
            throw new InvalidArgumentException("Line item not found: $lineItemId");
        }

        if (!in_array($lineItem->state, ['DRAFT', 'OPEN'])) {
            throw new RuntimeException("Cannot update line item in '{$lineItem->state}' state");
        }

        // Build update
        $fields = [];
        $params = [];

        if (isset($data['quantity'])) {
            $fields[] = "quantity = :quantity";
            $params[':quantity'] = (int)$data['quantity'];
        }

        if (isset($data['unit_cost'])) {
            $fields[] = "unit_cost = :unit_cost";
            $params[':unit_cost'] = (float)$data['unit_cost'];
        }

        if (isset($data['notes'])) {
            $fields[] = "notes = :notes";
            $params[':notes'] = $data['notes'];
        }

        if (empty($fields)) {
            return true;
        }

        // Recalculate total cost
        if (isset($data['quantity']) || isset($data['unit_cost'])) {
            $quantity = $data['quantity'] ?? $lineItem->quantity;
            $unitCost = $data['unit_cost'] ?? $lineItem->unit_cost;
            $fields[] = "total_cost = :total_cost";
            $params[':total_cost'] = $quantity * $unitCost;
        }

        $fields[] = "updated_at = NOW()";
        $params[':id'] = $lineItemId;

        try {
            $sql = "UPDATE vend_consignment_line_items SET " . implode(', ', $fields) . " WHERE id = :id";
            $stmt = $this->pdo->prepare($sql);
            $stmt->execute($params);

            // Update PO totals
            $this->updateTotals($lineItem->transfer_id);

            return true;

        } catch (PDOException $e) {
            throw new RuntimeException("Failed to update line item: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Delete line item
     *
     * @param int $lineItemId Line item ID
     * @return bool Success
     */
    public function deleteLineItem(int $lineItemId): bool
    {
        // Get line item and verify PO is editable
        $stmt = $this->pdo->prepare("
            SELECT vcli.transfer_id, vc.state
            FROM vend_consignment_line_items vcli
            JOIN vend_consignments vc ON vcli.transfer_id = vc.id
            WHERE vcli.id = ?
        ");
        $stmt->execute([$lineItemId]);
        $lineItem = $stmt->fetch(PDO::FETCH_OBJ);

        if (!$lineItem) {
            return false;
        }

        if (!in_array($lineItem->state, ['DRAFT', 'OPEN'])) {
            throw new RuntimeException("Cannot delete line item in '{$lineItem->state}' state");
        }

        try {
            $stmt = $this->pdo->prepare("DELETE FROM vend_consignment_line_items WHERE id = ?");
            $stmt->execute([$lineItemId]);

            // Update PO totals
            $this->updateTotals($lineItem->transfer_id);

            return true;

        } catch (PDOException $e) {
            throw new RuntimeException("Failed to delete line item: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Get line items for purchase order
     *
     * @param int $poId Purchase order ID
     * @return array Array of line item objects
     */
    public function getLineItems(int $poId): array
    {
        $stmt = $this->pdo->prepare("
            SELECT
                vcli.*,
                vp.name AS product_name,
                vp.sku AS product_sku,
                vp.supplier_code AS product_supplier_code
            FROM vend_consignment_line_items vcli
            LEFT JOIN vend_products vp ON vcli.product_id = vp.id
            WHERE vcli.transfer_id = :po_id
              AND vcli.deleted_at IS NULL
            ORDER BY vcli.created_at ASC
        ");

        $stmt->execute([':po_id' => $poId]);

        return $stmt->fetchAll(PDO::FETCH_OBJ);
    }

    // =========================================================================
    // PRIVATE HELPER METHODS
    // =========================================================================

    /**
     * Validate required fields
     */
    private function validateRequired(array $data, array $required): void
    {
        foreach ($required as $field) {
            if (!isset($data[$field]) || $data[$field] === '') {
                throw new InvalidArgumentException("Missing required field: $field");
            }
        }
    }

    /**
     * Check if state transition is valid
     */
    private function isValidStateTransition(string $currentState, string $newState): bool
    {
        // Define valid transitions
        $transitions = [
            'DRAFT' => ['OPEN', 'CANCELLED'],
            'OPEN' => ['PACKING', 'CANCELLED'],
            'PACKING' => ['PACKAGED', 'OPEN'],
            'PACKAGED' => ['SENT', 'PACKING'],
            'SENT' => ['RECEIVING', 'CANCELLED'],
            'RECEIVING' => ['PARTIAL', 'RECEIVED'],
            'PARTIAL' => ['RECEIVING', 'RECEIVED'],
            'RECEIVED' => ['CLOSED'],
            'CLOSED' => ['ARCHIVED'],
            'CANCELLED' => [], // Terminal state
            'ARCHIVED' => [] // Terminal state
        ];

        return in_array($newState, $transitions[$currentState] ?? []);
    }

    /**
     * Get product details
     */
    private function getProduct(string $productId): ?object
    {
        $stmt = $this->pdo->prepare("
            SELECT id, sku, name, supply_price AS cost, supplier_code
            FROM vend_products
            WHERE id = ?
        ");
        $stmt->execute([$productId]);

        return $stmt->fetch(PDO::FETCH_OBJ) ?: null;
    }

    /**
     * Update PO totals
     */
    private function updateTotals(int $poId): void
    {
        $stmt = $this->pdo->prepare("
            UPDATE vend_consignments vc
            SET
                vc.total_count = (
                    SELECT COALESCE(SUM(quantity), 0)
                    FROM vend_consignment_line_items
                    WHERE transfer_id = :po_id AND deleted_at IS NULL
                ),
                vc.total_cost = (
                    SELECT COALESCE(SUM(total_cost), 0)
                    FROM vend_consignment_line_items
                    WHERE transfer_id = :po_id AND deleted_at IS NULL
                ),
                vc.line_item_count = (
                    SELECT COUNT(*)
                    FROM vend_consignment_line_items
                    WHERE transfer_id = :po_id AND deleted_at IS NULL
                ),
                vc.updated_at = NOW()
            WHERE vc.id = :po_id
        ");

        $stmt->execute([':po_id' => $poId]);
    }

    /**
     * Log audit entry
     */
    private function logAudit(int $poId, string $action, string $status, array $metadata = []): void
    {
        try {
            $stmt = $this->pdo->prepare("
                INSERT INTO consignment_audit_log (
                    entity_type,
                    entity_pk,
                    transfer_pk,
                    action,
                    status,
                    actor_type,
                    actor_id,
                    metadata,
                    created_at
                ) VALUES (
                    'transfer',
                    :po_id,
                    :po_id,
                    :action,
                    :status,
                    :actor_type,
                    :actor_id,
                    :metadata,
                    NOW()
                )
            ");

            $stmt->execute([
                ':po_id' => $poId,
                ':action' => $action,
                ':status' => $status,
                ':actor_type' => $metadata['actor_type'] ?? 'system',
                ':actor_id' => $metadata['actor_id'] ?? null,
                ':metadata' => json_encode($metadata)
            ]);
        } catch (PDOException $e) {
            // Don't fail the main operation if audit logging fails
            error_log("Failed to log audit entry: " . $e->getMessage());
        }
    }

    /**
     * Get all suppliers for dropdowns
     *
     * @return array Array of supplier objects
     */
    public function getSuppliers(): array
    {
        try {
            $stmt = $this->pdo->query("
                SELECT
                    id,
                    name,
                    supplier_code AS code
                FROM vend_suppliers
                WHERE deleted_at IS NULL
                ORDER BY name ASC
            ");

            return $stmt->fetchAll(PDO::FETCH_OBJ);
        } catch (PDOException $e) {
            throw new RuntimeException("Failed to fetch suppliers: " . $e->getMessage(), 0, $e);
        }
    }

    /**
     * Get all outlets for dropdowns
     *
     * @return array Array of outlet objects
     */
    public function getOutlets(): array
    {
        try {
            $stmt = $this->pdo->query("
                SELECT
                    id,
                    name,
                    outlet_code AS code
                FROM vend_outlets
                WHERE deleted_at IS NULL
                ORDER BY name ASC
            ");

            return $stmt->fetchAll(PDO::FETCH_OBJ);
        } catch (PDOException $e) {
            throw new RuntimeException("Failed to fetch outlets: " . $e->getMessage(), 0, $e);
        }
    }
}
