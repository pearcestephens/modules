/* =============================================================================
   0)  HANDY SESSION VARS (for examples)
   ============================================================================= */
SET @from_date  = DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY);
SET @to_date    = CURRENT_DATE() + INTERVAL 1 DAY;
SET @outlet_from = 'OUTLET_UUID_FROM';
SET @outlet_to   = 'OUTLET_UUID_TO';
SET @transfer_id = 12345;
SET @shipment_id = 67890;

/* =============================================================================
   1)  TRANSFERS — LISTS, COUNTS, DASHBOARDS (MOST USED)
   ============================================================================= */

/* 1.1 Newest 50 active transfers (not deleted) */
SELECT t.*
FROM transfers t
WHERE t.deleted_at IS NULL
ORDER BY t.created_at DESC
LIMIT 50;

/* 1.2 Latest “work queue” — transfers in progress (by state) */
SELECT t.id, t.public_id, t.transfer_category, t.state, t.outlet_from, t.outlet_to, t.created_at
FROM transfers t
WHERE t.deleted_at IS NULL
  AND t.state IN ('OPEN','PACKING','PACKAGED','SENT','RECEIVING','PARTIAL')
ORDER BY t.created_at DESC
LIMIT 100;

/* 1.3 State breakdown (last 30 days) */
SELECT t.state, COUNT(*) AS cnt
FROM transfers t
WHERE t.deleted_at IS NULL
  AND t.created_at >= @from_date
GROUP BY t.state
ORDER BY cnt DESC;

/* 1.4 Category + state breakdown (for dashboard tiles) */
SELECT t.transfer_category, t.state, COUNT(*) AS cnt
FROM transfers t
WHERE t.deleted_at IS NULL
  AND t.created_at BETWEEN @from_date AND @to_date
GROUP BY t.transfer_category, t.state
ORDER BY cnt DESC;

/* 1.5 Outlet pair traffic (who sends to whom, last 30 days) */
SELECT t.outlet_from, t.outlet_to, COUNT(*) AS transfers
FROM transfers t
WHERE t.deleted_at IS NULL
  AND t.created_at >= @from_date
GROUP BY t.outlet_from, t.outlet_to
ORDER BY transfers DESC
LIMIT 50;

/* 1.6 Find by Vend references */
SELECT t.*
FROM transfers t
WHERE (t.vend_transfer_id = :vend_uuid
    OR t.vend_number = :vend_number)
  AND t.deleted_at IS NULL;

/* 1.7 Find by public token */
SELECT t.* FROM transfers t
WHERE t.public_id = :public_id AND t.deleted_at IS NULL;

/* 1.8 Keyset pagination (faster than OFFSET for long lists) */
-- first page:
SELECT t.id, t.public_id, t.state, t.created_at
FROM transfers t
WHERE t.deleted_at IS NULL
ORDER BY t.id DESC
LIMIT 50;

-- next page after you captured last_id:
SELECT t.id, t.public_id, t.state, t.created_at
FROM transfers t
WHERE t.deleted_at IS NULL
  AND t.id < :last_seen_id
ORDER BY t.id DESC
LIMIT 50;

/* 1.9 Transfers due for receiving (shipments sent) */
SELECT t.id, t.public_id, t.state, MAX(s.created_at) AS last_packed_or_sent
FROM transfers t
JOIN transfer_shipments s ON s.transfer_id = t.id
WHERE t.deleted_at IS NULL
  AND s.status IN ('packed','in_transit','partial')
  AND t.state IN ('SENT','RECEIVING','PARTIAL')
GROUP BY t.id
ORDER BY last_packed_or_sent DESC;

/* 1.10 “JUICE” vs “STOCK” vs “STAFF” quick filters */
SELECT id, public_id, state, created_at
FROM transfers
WHERE transfer_category = 'JUICE' AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT 100;

/* =============================================================================
   2)  ITEMS — REQUESTED / SENT / RECEIVED / OUTSTANDING
   ============================================================================= */

/* 2.1 Per-transfer rollup: requested / sent / received */
SELECT
  ti.transfer_id,
  SUM(ti.qty_requested)      AS requested,
  SUM(ti.qty_sent_total)     AS sent,
  SUM(ti.qty_received_total) AS received,
  SUM(ti.qty_requested - ti.qty_sent_total)      AS outstanding_to_send,
  SUM(ti.qty_sent_total - ti.qty_received_total) AS outstanding_to_receive
FROM transfer_items ti
WHERE ti.transfer_id = @transfer_id
GROUP BY ti.transfer_id;

/* 2.2 Item detail list for a transfer (pack screen) */
SELECT
  ti.id AS item_id,
  ti.product_id,
  ti.qty_requested,
  ti.qty_sent_total,
  ti.qty_received_total,
  ti.confirmation_status,
  (ti.qty_requested - ti.qty_sent_total)      AS to_send,
  (ti.qty_sent_total - ti.qty_received_total) AS to_receive
FROM transfer_items ti
WHERE ti.transfer_id = @transfer_id
ORDER BY ti.created_at ASC;

/* 2.3 Items awaiting supplier-store confirmation */
SELECT ti.*
FROM transfer_items ti
WHERE ti.transfer_id = @transfer_id
  AND ti.confirmation_status = 'pending'
ORDER BY ti.created_at;

/* 2.4 Items that still need sending (positive “to_send”) */
SELECT *
FROM (
  SELECT ti.*, (ti.qty_requested - ti.qty_sent_total) AS to_send
  FROM transfer_items ti
  WHERE ti.transfer_id = @transfer_id
) x
WHERE x.to_send > 0
ORDER BY x.to_send DESC;

/* 2.5 Items that still need receiving (positive “to_receive”) */
SELECT *
FROM (
  SELECT ti.*, (ti.qty_sent_total - ti.qty_received_total) AS to_receive
  FROM transfer_items ti
  WHERE ti.transfer_id = @transfer_id
) x
WHERE x.to_receive > 0
ORDER BY x.to_receive DESC;

/* 2.6 Top SKUs moved in last 30 days (by qty_sent_total) */
SELECT ti.product_id, SUM(ti.qty_sent_total) AS qty
FROM transfer_items ti
JOIN transfers t ON t.id = ti.transfer_id
WHERE t.deleted_at IS NULL
  AND t.created_at >= @from_date
GROUP BY ti.product_id
ORDER BY qty DESC
LIMIT 50;

/* =============================================================================
   3)  SHIPMENTS / PARCELS / LABELS / TRACKING
   ============================================================================= */

/* 3.1 Shipments for a transfer + parcel counts & last update */
SELECT
  s.id AS shipment_id,
  s.status,
  s.delivery_mode,
  s.packed_at,
  s.received_at,
  COUNT(p.id)            AS parcel_count,
  MAX(p.updated_at)      AS last_parcel_update
FROM transfer_shipments s
LEFT JOIN transfer_parcels p ON p.shipment_id = s.id
WHERE s.transfer_id = @transfer_id
GROUP BY s.id
ORDER BY s.created_at;

/* 3.2 Parcels in a shipment, with physicals and tracking */
SELECT
  p.id AS parcel_id,
  p.box_number,
  p.weight_kg, p.weight_grams,
  p.length_mm, p.width_mm, p.height_mm,
  p.tracking_number, p.courier, p.status,
  p.label_url, p.updated_at
FROM transfer_parcels p
WHERE p.shipment_id = @shipment_id
ORDER BY p.box_number;

/* 3.3 Parcels that need labels/tracking */
SELECT p.*
FROM transfer_parcels p
JOIN transfer_shipments s ON s.id = p.shipment_id
WHERE p.tracking_number IS NULL
  AND p.label_url IS NULL
  AND s.transfer_id = @transfer_id
ORDER BY p.updated_at DESC;

/* 3.4 Labels for a transfer (dedup by tracking) */
SELECT tl.*
FROM transfer_labels tl
WHERE tl.transfer_id = @transfer_id
ORDER BY tl.created_at DESC;

/* 3.5 Tracking events (last 48h) for this transfer */
SELECT te.*
FROM transfer_tracking_events te
WHERE te.transfer_id = @transfer_id
  AND te.occurred_at >= NOW() - INTERVAL 2 DAY
ORDER BY te.occurred_at DESC;

/* 3.6 Parcels with exceptions / missing/damaged */
SELECT p.*
FROM transfer_parcels p
WHERE p.status IN ('missing','damaged','exception')
ORDER BY p.updated_at DESC;

/* =============================================================================
   4)  RECEIVING — RECEIPTS & PARCEL ITEMS
   ============================================================================= */

/* 4.1 Receipts (header) for a transfer */
SELECT r.*
FROM transfer_receipts r
WHERE r.transfer_id = @transfer_id
ORDER BY r.created_at DESC;

/* 4.2 Received lines per transfer item (with totals) */
SELECT
  tri.transfer_item_id,
  SUM(tri.qty_received) AS qty_received,
  COUNT(*)              AS receipt_lines
FROM transfer_receipt_items tri
JOIN transfer_receipts r ON r.id = tri.receipt_id
WHERE r.transfer_id = @transfer_id
GROUP BY tri.transfer_item_id;

/* 4.3 Parcel items (box-by-box receive view) */
SELECT
  tpi.parcel_id, tpi.item_id, tpi.qty, tpi.qty_received, tpi.locked_at
FROM transfer_parcel_items tpi
JOIN transfer_parcels p ON p.id = tpi.parcel_id
WHERE p.shipment_id = @shipment_id
ORDER BY tpi.created_at;

/* =============================================================================
   5)  NOTES / DISCREPANCIES / MEDIA
   ============================================================================= */

/* 5.1 Notes for a transfer (most recent first) */
SELECT n.*
FROM transfer_notes n
WHERE n.transfer_id = @transfer_id
  AND n.deleted_at IS NULL
ORDER BY n.created_at DESC;

/* 5.2 Open discrepancies per transfer, by type */
SELECT d.type, COUNT(*) AS open_count, SUM(d.qty) AS total_qty
FROM transfer_discrepancies d
WHERE d.transfer_id = @transfer_id
  AND d.status = 'open'
GROUP BY d.type
ORDER BY open_count DESC;

/* 5.3 Media attachments (photos/videos) by kind */
SELECT m.kind, COUNT(*) AS files, SUM(m.size_bytes) AS total_bytes
FROM transfer_media m
WHERE m.transfer_id = @transfer_id
GROUP BY m.kind;

/* =============================================================================
   6)  LOCKS — WHO IS PACKING, REQUESTS, AUDIT
   ============================================================================= */

/* 6.1 Who currently holds the pack lock? (if any) */
SELECT pl.*
FROM transfer_pack_locks pl
WHERE pl.transfer_id = @transfer_id
  AND pl.expires_at > NOW();

/* 6.2 Pending lock requests (expiring soonest first) */
SELECT lr.*
FROM transfer_pack_lock_requests lr
WHERE lr.transfer_id = @transfer_id
  AND lr.status = 'pending'
ORDER BY lr.expires_at ASC;

/* 6.3 Lock audit trail for this transfer */
SELECT la.*
FROM transfer_pack_lock_audit la
WHERE la.transfer_id = @transfer_id
ORDER BY la.created_at DESC;

/* =============================================================================
   7)  LOGS — UNIFIED LOG + AUDIT LOG
   ============================================================================= */

/* 7.1 Recent log events for a transfer (unified) */
SELECT l.*
FROM transfer_unified_log l
WHERE l.transfer_id = @transfer_id
ORDER BY l.created_at DESC
LIMIT 200;

/* 7.2 Full-text search in unified log (last 7 days) */
SELECT l.*
FROM transfer_unified_log l
WHERE l.created_at >= NOW() - INTERVAL 7 DAY
  AND MATCH(l.message) AGAINST ('+"pack" +"error"' IN BOOLEAN MODE)
ORDER BY l.created_at DESC
LIMIT 100;

/* 7.3 Error rate by category (last 30 days) */
SELECT l.category,
       SUM(l.severity IN ('error','critical','alert','emergency')) AS error_like,
       COUNT(*) AS total,
       ROUND(SUM(l.severity IN ('error','critical','alert','emergency')) / COUNT(*), 4) AS error_rate
FROM transfer_unified_log l
WHERE l.created_at >= @from_date
GROUP BY l.category
ORDER BY error_rate DESC, total DESC;

/* 7.4 Audit trail (who did what, when) */
SELECT a.entity_type, a.action, a.status, a.actor_type, a.actor_id, a.created_at
FROM transfer_audit_log a
WHERE (a.transfer_pk = @transfer_id OR a.transfer_id = CAST(@transfer_id AS CHAR))
ORDER BY a.created_at DESC
LIMIT 200;

/* 7.5 Archive lookup (compliance) */
SELECT al.*
FROM transfer_log_archive al
WHERE al.category = 'transfer'
  AND al.trace_id = :trace_id
ORDER BY al.archived_at DESC;

/* =============================================================================
   8)  AI — INSIGHTS / AUDIT / OVERRIDES
   ============================================================================= */

/* 8.1 Freshest, non-expired insight per transfer */
WITH ranked AS (
  SELECT i.*,
         ROW_NUMBER() OVER (PARTITION BY i.transfer_id ORDER BY i.generated_at DESC) AS rn
  FROM transfer_ai_insights i
  WHERE i.expires_at > NOW()
)
SELECT *
FROM ranked
WHERE rn = 1
  AND transfer_id = @transfer_id;

/* 8.2 Last 10 AI audit decisions for a transfer */
SELECT al.*
FROM transfer_ai_audit_log al
WHERE al.transfer_id = @transfer_id
ORDER BY al.created_at DESC
LIMIT 10;

/* 8.3 AI override rate (last 30 days) */
SELECT
  COUNT(*)                               AS total_decisions,
  SUM(al.was_overridden = 1)             AS overrides,
  ROUND(SUM(al.was_overridden = 1)/COUNT(*), 4) AS override_rate
FROM transfer_ai_audit_log al
WHERE al.created_at >= @from_date;

/* 8.4 Pull a feature from JSON (example) */
SELECT
  al.id,
  JSON_UNQUOTE(JSON_EXTRACT(al.input_features, '$.demand.score')) AS demand_score
FROM transfer_ai_audit_log al
WHERE al.transfer_id = @transfer_id
ORDER BY al.created_at DESC
LIMIT 20;

/* =============================================================================
   9)  QUEUE — BACKLOG, RETRIES, FAILURES
   ============================================================================= */

/* 9.1 Next jobs to process (ready + by priority) */
SELECT q.*
FROM transfer_queue_log q
WHERE q.status = 'pending'
  AND (q.next_retry_at IS NULL OR q.next_retry_at <= NOW())
ORDER BY q.priority ASC, q.created_at ASC
LIMIT 100;

/* 9.2 “Stuck” processing (no update for N minutes) */
SELECT q.*
FROM transfer_queue_log q
WHERE q.status = 'processing'
  AND q.updated_at < NOW() - INTERVAL 15 MINUTE
ORDER BY q.updated_at;

/* 9.3 Fail reasons (top) in last 7 days */
SELECT q.error_code, COUNT(*) AS fails, MAX(q.updated_at) AS last_seen
FROM transfer_queue_log q
WHERE q.status = 'failed'
  AND q.updated_at >= NOW() - INTERVAL 7 DAY
GROUP BY q.error_code
ORDER BY fails DESC
LIMIT 20;

/* 9.4 Idempotency lookups (avoid dupes) */
SELECT q.*
FROM transfer_queue_log q
WHERE q.idempotency_key = :idem_key
ORDER BY q.created_at DESC;

/* =============================================================================
   10)  METRICS — PERFORMANCE, USER EFFICIENCY, QUEUE
   ============================================================================= */

/* 10.1 BI: transfer metrics by status (last 30 days) */
SELECT tm.status, COUNT(*) AS cnt,
       SUM(tm.total_items) AS items, SUM(tm.total_quantity) AS qty
FROM transfer_metrics tm
WHERE tm.created_at BETWEEN @from_date AND @to_date
GROUP BY tm.status
ORDER BY cnt DESC;

/* 10.2 Aggregated performance metrics by day */
SELECT metric_date, category, operation,
       SUM(total_operations) AS ops,
       SUM(error_count)      AS errors,
       ROUND(SUM(error_count)/NULLIF(SUM(total_operations),0), 4) AS error_rate,
       AVG(avg_duration_ms) AS avg_ms, MAX(p95_duration_ms) AS p95_ms, MAX(p99_duration_ms) AS p99_ms
FROM transfer_performance_metrics
WHERE metric_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) AND CURRENT_DATE()
GROUP BY metric_date, category, operation
ORDER BY metric_date DESC, ops DESC;

/* 10.3 User efficiency leaderboard (today) */
SELECT ue.user_id,
       ue.transfers_packed, ue.items_packed,
       ue.accuracy_score, ue.efficiency_score, ue.daily_rank
FROM transfer_user_efficiency ue
WHERE ue.date = CURRENT_DATE()
ORDER BY ue.daily_rank IS NULL, ue.daily_rank ASC, ue.efficiency_score DESC
LIMIT 50;

/* 10.4 Queue metrics — backlog trend (last 24h) */
SELECT DATE_FORMAT(recorded_at, '%Y-%m-%d %H:00') AS hr,
       SUM(value) FILTER (WHERE metric_type='pending_count') AS pending_count
FROM transfer_queue_metrics
WHERE recorded_at >= NOW() - INTERVAL 1 DAY
GROUP BY hr
ORDER BY hr;

/* 10.5 Session analytics: average active time by page (7d) */
SELECT page_type,
       AVG(active_duration_seconds) AS avg_active_s,
       AVG(total_interactions)      AS avg_interactions
FROM transfer_session_analytics
WHERE session_start >= NOW() - INTERVAL 7 DAY
GROUP BY page_type
ORDER BY avg_active_s DESC;

/* 10.6 Performance logs → time-to-pack (example: start→complete) */
SELECT
  start.transfer_id,
  TIMESTAMPDIFF(SECOND, start.event_timestamp, done.event_timestamp) AS seconds_to_pack
FROM transfer_performance_logs start
JOIN transfer_performance_logs done
  ON done.transfer_id = start.transfer_id
 AND done.event_type = 'PACKING_COMPLETED'
WHERE start.event_type = 'PACKING_STARTED'
  AND start.event_timestamp >= @from_date;

/* =============================================================================
   11)  VALIDATION CACHE / CONFIG / EXECUTIONS / ALLOCATIONS
   ============================================================================= */

/* 11.1 Transfers pending approval in validation cache */
SELECT vc.*
FROM transfer_validation_cache vc
WHERE vc.requires_approval = 1
  AND vc.status IN ('valid','invalid')  -- “error” often needs different handling
ORDER BY vc.created_at DESC
LIMIT 100;

/* 11.2 Validation cache by outlet pair & freshness */
SELECT vc.*
FROM transfer_validation_cache vc
WHERE vc.outlet_from = @outlet_from
  AND vc.outlet_to   = @outlet_to
  AND vc.expires_at  > NOW()
ORDER BY vc.created_at DESC
LIMIT 10;

/* 11.3 Active configurations (presets first) */
SELECT *
FROM transfer_configurations
WHERE is_active = 1
ORDER BY is_preset DESC, name;

/* 11.4 Execution history for a transfer */
SELECT x.*
FROM transfer_executions x
WHERE x.transfer_id = @transfer_id
ORDER BY x.created_at DESC;

/* 11.5 Allocations produced by an execution */
SELECT a.*
FROM transfer_allocations a
WHERE a.execution_id = :execution_id
ORDER BY a.created_at;

/* =============================================================================
   12)  ALERTS — RULES, CONFIGS, OPEN ALERTS
   ============================================================================= */

/* 12.1 Active alert rules */
SELECT *
FROM transfer_alert_rules
WHERE is_active = 1
ORDER BY severity DESC, threshold_count DESC;

/* 12.2 Alert configs (enabled only) */
SELECT *
FROM transfer_alert_config
WHERE active = 1
ORDER BY severity DESC, created_at DESC;

/* 12.3 Unacknowledged alerts (recent first) */
SELECT al.*
FROM transfer_alerts_log al
WHERE al.acknowledged = 0
ORDER BY al.triggered_at DESC
LIMIT 200;

/* =============================================================================
   13)  COMPOSITE “DETAIL” QUERIES (ONE-SHOT PAGES)
   ============================================================================= */

/* 13.1 Transfer header + progress rollup (single query) */
SELECT
  t.id, t.public_id, t.transfer_category, t.state, t.outlet_from, t.outlet_to,
  t.created_at, t.updated_at,
  COALESCE(SUM(ti.qty_requested),0)      AS qty_requested,
  COALESCE(SUM(ti.qty_sent_total),0)     AS qty_sent,
  COALESCE(SUM(ti.qty_received_total),0) AS qty_received,
  ROUND(
    CASE WHEN COALESCE(SUM(ti.qty_requested),0) = 0 THEN 0
         ELSE COALESCE(SUM(ti.qty_sent_total),0) / SUM(ti.qty_requested)
    END * 100, 1) AS pack_progress_pct,
  ROUND(
    CASE WHEN COALESCE(SUM(ti.qty_sent_total),0) = 0 THEN 0
         ELSE COALESCE(SUM(ti.qty_received_total),0) / SUM(ti.qty_sent_total)
    END * 100, 1) AS receive_progress_pct
FROM transfers t
LEFT JOIN transfer_items ti ON ti.transfer_id = t.id
WHERE t.id = @transfer_id
GROUP BY t.id;

/* 13.2 Transfer “activity feed” from unified log + notes (last 200) */
(
  SELECT 'LOG' AS k, l.created_at, l.severity, l.event_type AS title, l.message AS body
  FROM transfer_unified_log l
  WHERE l.transfer_id = @transfer_id
)
UNION ALL
(
  SELECT 'NOTE' AS k, n.created_at, 'info' AS severity, 'Note' AS title, n.note_text AS body
  FROM transfer_notes n
  WHERE n.transfer_id = @transfer_id AND n.deleted_at IS NULL
)
ORDER BY created_at DESC
LIMIT 200;

/* =============================================================================
   14)  HOUSEKEEPING / RETENTION / SAFETY REPORTS
   ============================================================================= */

/* 14.1 Old logs ready for archival (example: > 180 days) */
SELECT id
FROM transfer_unified_log
WHERE created_at < NOW() - INTERVAL 180 DAY
LIMIT 10000;

/* 14.2 Queue metrics cleanup (older than 90 days) — preview */
SELECT COUNT(*) AS to_delete
FROM transfer_queue_metrics
WHERE recorded_at < NOW() - INTERVAL 90 DAY;

/* 14.3 Find duplicate label trackings within a transfer (shouldn’t happen) */
SELECT tracking, COUNT(*) AS c
FROM transfer_labels
WHERE transfer_id = @transfer_id
GROUP BY tracking
HAVING COUNT(*) > 1;

/* =============================================================================
   15)  JSON WORK (MariaDB/MySQL compatible examples)
   ============================================================================= */

/* 15.1 Pull structured fields from validation_result JSON */
SELECT
  vc.id,
  JSON_UNQUOTE(JSON_EXTRACT(vc.validation_result, '$.summary.status')) AS v_status,
  JSON_UNQUOTE(JSON_EXTRACT(vc.economic_analysis, '$.estimated_courier_cost')) AS est_courier_cost
FROM transfer_validation_cache vc
WHERE vc.transfer_data IS NOT NULL
  AND vc.created_at >= @from_date
ORDER BY vc.created_at DESC
LIMIT 100;

/* 15.2 Does event_data contain a tag? (array contains) */
SELECT l.*
FROM transfer_unified_log l
WHERE JSON_CONTAINS(l.tags, JSON_QUOTE('pack'), '$')  -- tags is an array
  AND l.created_at >= @from_date
ORDER BY l.created_at DESC;

/* =============================================================================
   16)  WRITE EXAMPLES (SAFE PATTERNS) — USE WITH CARE
   ============================================================================= */

/* 16.1 Insert a note on a transfer */
INSERT INTO transfer_notes (transfer_id, note_text, created_by)
VALUES (:transfer_id, :note_text, :user_id);

/* 16.2 Acknowledge an alert */
UPDATE transfer_alerts_log
SET acknowledged = 1,
    acknowledged_by = :user_id,
    acknowledged_at = NOW()
WHERE id = :alert_id
  AND acknowledged = 0;

/* 16.3 Resolve an alert with notes */
UPDATE transfer_alerts_log
SET resolved = 1,
    resolution_notes = :notes
WHERE id = :alert_id;

/* 16.4 Upsert queue metric (idempotent “counter” style) */
INSERT INTO transfer_queue_metrics
  (metric_type, queue_name, job_type, value, unit, metadata, recorded_at)
VALUES
  ('pending_count', :queue, :job_type, :val, 'count', :meta_json, NOW())
ON DUPLICATE KEY UPDATE
  value = VALUES(value),
  metadata = VALUES(metadata),
  recorded_at = VALUES(recorded_at);

/* 16.5 Insert a unified log entry */
INSERT INTO transfer_unified_log
(trace_id, category, event_type, severity, message, transfer_id, actor_user_id, source_system, created

CREATE TABLE `transfer_ai_audit_log` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `trace_id` varchar(100) NOT NULL,
  `decision_id` bigint(20) unsigned DEFAULT NULL COMMENT 'FK to ai_freight_decisions',
  `model_name` varchar(100) NOT NULL COMMENT 'FreightAI, NeuroLink, AutoPack, etc',
  `model_version` varchar(50) NOT NULL COMMENT 'Model version for reproducibility',
  `algorithm` varchar(50) DEFAULT NULL COMMENT 'UCB1, epsilon-greedy, gradient-boost, etc',
  `transfer_id` int(10) unsigned DEFAULT NULL,
  `input_features` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'All features used for decision' CHECK (json_valid(`input_features`)),
  `context_key` varchar(255) DEFAULT NULL COMMENT 'Contextual bandit bucket',
  `recommendation` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'AI recommended action' CHECK (json_valid(`recommendation`)),
  `confidence_score` decimal(5,4) NOT NULL COMMENT 'Confidence (0.0000 to 1.0000)',
  `alternative_options` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Other options considered with scores' CHECK (json_valid(`alternative_options`)),
  `exploration_mode` tinyint(1) NOT NULL DEFAULT 0 COMMENT 'TRUE if exploring vs exploiting',
  `estimated_savings_nzd` decimal(10,2) DEFAULT NULL COMMENT 'Projected cost savings',
  `estimated_time_mins` int(10) unsigned DEFAULT NULL COMMENT 'Estimated time impact',
  `risk_score` decimal(5,4) DEFAULT NULL COMMENT 'Risk assessment (0=low, 1=high)',
  `was_overridden` tinyint(1) NOT NULL DEFAULT 0 COMMENT 'Did human override AI?',
  `override_reason` text DEFAULT NULL COMMENT 'Why human overrode AI decision',
  `override_user_id` int(10) unsigned DEFAULT NULL COMMENT 'Staff who overrode',
  `override_at` timestamp NULL DEFAULT NULL COMMENT 'When override occurred',
  `actual_outcome` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Actual result after action taken' CHECK (json_valid(`actual_outcome`)),
  `actual_cost_nzd` decimal(10,2) DEFAULT NULL COMMENT 'Actual cost incurred',
  `outcome_recorded_at` timestamp NULL DEFAULT NULL COMMENT 'When outcome was recorded',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_trace` (`trace_id`),
  KEY `idx_decision` (`decision_id`),
  KEY `idx_transfer` (`transfer_id`),
  KEY `idx_model` (`model_name`,`model_version`,`created_at`),
  KEY `idx_confidence` (`confidence_score`),
  KEY `idx_override` (`was_overridden`,`created_at`),
  KEY `idx_created` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Detailed AI decision audit trail for governance and explainability';

CREATE TABLE `transfer_ai_insights` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `insight_text` text NOT NULL,
  `insight_json` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Structured insight data' CHECK (json_valid(`insight_json`)),
  `insight_type` varchar(50) DEFAULT 'general' COMMENT 'logistics, inventory, timing, cost, staff, risk',
  `priority` varchar(20) DEFAULT 'medium' COMMENT 'low, medium, high, critical',
  `confidence_score` decimal(3,2) DEFAULT 0.85 COMMENT '0.00 to 1.00',
  `model_provider` varchar(50) NOT NULL COMMENT 'openai, anthropic',
  `model_name` varchar(100) NOT NULL COMMENT 'gpt-4o, claude-3.5-sonnet',
  `tokens_used` int(11) DEFAULT 0,
  `processing_time_ms` int(11) DEFAULT 0,
  `generated_at` datetime NOT NULL,
  `expires_at` datetime NOT NULL COMMENT 'Cache expiry time',
  `created_by` int(11) DEFAULT NULL COMMENT 'User ID if manually regenerated',
  PRIMARY KEY (`id`),
  KEY `idx_transfer_id` (`transfer_id`),
  KEY `idx_generated_at` (`generated_at`),
  KEY `idx_expires_at` (`expires_at`),
  KEY `idx_priority` (`priority`),
  KEY `idx_transfer_fresh` (`transfer_id`,`expires_at`),
  CONSTRAINT `transfer_ai_insights_ibfk_1` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=113 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_alert_config` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `alert_type` varchar(100) NOT NULL,
  `alert_category` enum('performance','accuracy','anomaly','security') NOT NULL,
  `threshold_metric` varchar(100) NOT NULL,
  `threshold_value` decimal(12,4) NOT NULL,
  `threshold_operator` enum('<','<=','>','>=','=','!=') NOT NULL,
  `severity` enum('info','warning','error','critical') NOT NULL,
  `notify_user` tinyint(1) DEFAULT 0,
  `notify_manager` tinyint(1) DEFAULT 1,
  `notification_channels` longtext DEFAULT NULL,
  `cooldown_minutes` int(10) unsigned DEFAULT 60,
  `active` tinyint(1) DEFAULT 1,
  `description` text DEFAULT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_alert_type` (`alert_type`),
  KEY `idx_active` (`active`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Configurable alert thresholds for automated monitoring';

CREATE TABLE `transfer_alert_rules` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `rule_name` varchar(100) NOT NULL COMMENT 'Human-readable rule name',
  `category` varchar(50) NOT NULL COMMENT 'Log category to monitor',
  `event_type` varchar(100) DEFAULT NULL COMMENT 'Specific event or NULL for all',
  `severity` enum('debug','info','notice','warning','error','critical','alert','emergency') NOT NULL,
  `threshold_count` int(10) unsigned NOT NULL DEFAULT 1 COMMENT 'Number of events',
  `threshold_window_min` int(10) unsigned NOT NULL DEFAULT 5 COMMENT 'Time window in minutes',
  `alert_method` enum('email','slack','webhook','sms') NOT NULL DEFAULT 'email',
  `alert_recipients` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'Array of recipients (emails, slack channels, etc)' CHECK (json_valid(`alert_recipients`)),
  `alert_message_template` text DEFAULT NULL COMMENT 'Custom alert message template',
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  `last_triggered_at` timestamp NULL DEFAULT NULL,
  `trigger_count` int(10) unsigned NOT NULL DEFAULT 0,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `rule_name` (`rule_name`),
  KEY `idx_active` (`is_active`,`category`,`severity`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Alert escalation rules for critical events';

CREATE TABLE `transfer_alerts_log` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `alert_config_id` int(10) unsigned NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `transfer_id` int(11) DEFAULT NULL,
  `session_id` varchar(255) DEFAULT NULL,
  `alert_message` text NOT NULL,
  `severity` enum('info','warning','error','critical') NOT NULL,
  `trigger_metric` varchar(100) DEFAULT NULL,
  `trigger_value` decimal(12,4) DEFAULT NULL,
  `threshold_value` decimal(12,4) DEFAULT NULL,
  `acknowledged` tinyint(1) DEFAULT 0,
  `acknowledged_by` int(11) DEFAULT NULL,
  `acknowledged_at` datetime DEFAULT NULL,
  `resolved` tinyint(1) DEFAULT 0,
  `resolution_notes` text DEFAULT NULL,
  `triggered_at` datetime(3) DEFAULT current_timestamp(3),
  PRIMARY KEY (`id`),
  KEY `idx_alert_config` (`alert_config_id`),
  KEY `idx_user` (`user_id`),
  KEY `idx_transfer` (`transfer_id`),
  KEY `idx_triggered` (`triggered_at`),
  KEY `idx_unresolved` (`resolved`,`triggered_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Log of all triggered alerts for monitoring';

CREATE TABLE `transfer_allocations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `public_id` varchar(40) DEFAULT NULL,
  `execution_id` int(10) unsigned NOT NULL,
  `product_id` varchar(50) NOT NULL,
  `allocated_quantity` int(11) NOT NULL,
  `calculation_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`calculation_data`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `transfer_id` bigint(20) unsigned DEFAULT NULL,
  `item_id` bigint(20) unsigned DEFAULT NULL,
  `qty` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_ta_pub` (`public_id`),
  KEY `fk_execution` (`execution_id`),
  KEY `idx_product` (`product_id`),
  KEY `idx_allocation_product_date` (`product_id`,`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_audit_log` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `entity_type` enum('transfer','po') NOT NULL DEFAULT 'transfer',
  `entity_pk` int(11) DEFAULT NULL,
  `transfer_pk` int(11) DEFAULT NULL,
  `transfer_id` varchar(100) DEFAULT NULL COMMENT 'Internal transfer ID',
  `vend_consignment_id` varchar(100) DEFAULT NULL COMMENT 'Vend consignment ID',
  `vend_transfer_id` char(36) DEFAULT NULL,
  `action` varchar(100) NOT NULL COMMENT 'Action performed',
  `status` varchar(50) NOT NULL COMMENT 'Action status',
  `actor_type` enum('system','user','api','cron','webhook') NOT NULL,
  `actor_id` varchar(100) DEFAULT NULL COMMENT 'User ID or system identifier',
  `outlet_from` varchar(100) DEFAULT NULL,
  `outlet_to` varchar(100) DEFAULT NULL,
  `data_before` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'State before action' CHECK (json_valid(`data_before`)),
  `data_after` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'State after action' CHECK (json_valid(`data_after`)),
  `metadata` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Additional context data' CHECK (json_valid(`metadata`)),
  `error_details` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Error information if failed' CHECK (json_valid(`error_details`)),
  `processing_time_ms` int(10) unsigned DEFAULT NULL,
  `api_response` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'External API response' CHECK (json_valid(`api_response`)),
  `session_id` varchar(255) DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_transfer_id` (`transfer_id`),
  KEY `idx_vend_consignment` (`vend_consignment_id`),
  KEY `idx_action_status` (`action`,`status`),
  KEY `idx_actor` (`actor_type`,`actor_id`),
  KEY `idx_outlet_from_to` (`outlet_from`,`outlet_to`),
  KEY `idx_created_at` (`created_at`),
  KEY `idx_error_tracking` (`status`,`created_at`) COMMENT 'For error rate monitoring',
  KEY `idx_transfer_pk` (`transfer_pk`),
  KEY `idx_vend_transfer` (`vend_transfer_id`),
  KEY `idx_entity` (`entity_type`,`entity_pk`),
  KEY `idx_audit_errors` (`status`,`created_at`),
  KEY `idx_tal_entity_action_time` (`entity_type`,`action`,`created_at`),
  KEY `idx_tal_transfer_time` (`transfer_id`,`created_at`),
  KEY `idx_tal_status_time` (`status`,`created_at`),
  KEY `idx_tal_actor_time` (`actor_type`,`actor_id`,`created_at`),
  KEY `idx_audit_transfer_created` (`transfer_id`,`created_at`),
  KEY `idx_audit_action_created` (`action`,`created_at`)
) ENGINE=InnoDB AUTO_INCREMENT=805 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Comprehensive audit trail for all transfer operations';

CREATE TABLE `transfer_behavior_patterns` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `pattern_id` varchar(36) NOT NULL,
  `pattern_type` varchar(100) NOT NULL,
  `user_id` int(11) DEFAULT NULL,
  `transfer_id` int(11) DEFAULT NULL,
  `item_id` int(11) DEFAULT NULL,
  `product_id` varchar(36) DEFAULT NULL,
  `feature_vector` longtext NOT NULL,
  `confidence_score` decimal(5,4) DEFAULT NULL,
  `sample_size` int(10) unsigned DEFAULT NULL,
  `hour_of_day` tinyint(3) unsigned DEFAULT NULL,
  `day_of_week` tinyint(3) unsigned DEFAULT NULL,
  `time_bucket` varchar(20) DEFAULT NULL,
  `insight_type` enum('efficiency','accuracy','speed','anomaly','improvement') NOT NULL,
  `insight_summary` text DEFAULT NULL,
  `actionable_recommendation` text DEFAULT NULL,
  `mean_value` decimal(10,4) DEFAULT NULL,
  `median_value` decimal(10,4) DEFAULT NULL,
  `std_deviation` decimal(10,4) DEFAULT NULL,
  `min_value` decimal(10,4) DEFAULT NULL,
  `max_value` decimal(10,4) DEFAULT NULL,
  `detected_at` datetime(3) NOT NULL,
  `last_updated` datetime(3) DEFAULT current_timestamp(3) ON UPDATE current_timestamp(3),
  `expires_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `pattern_id` (`pattern_id`),
  KEY `idx_pattern_type` (`pattern_type`),
  KEY `idx_user` (`user_id`),
  KEY `idx_product` (`product_id`),
  KEY `idx_detected` (`detected_at`),
  KEY `idx_composite` (`user_id`,`pattern_type`,`detected_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Neural network ready behavior patterns for ML analysis';

CREATE TABLE `transfer_carrier_orders` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Row ID',
  `transfer_id` int(11) NOT NULL COMMENT 'FK to transfers.id',
  `carrier` varchar(50) NOT NULL COMMENT 'Carrier code e.g., NZ_POST, GSS',
  `order_id` varchar(100) DEFAULT NULL COMMENT 'Carrier order identifier (string, may be numeric)',
  `order_number` varchar(100) NOT NULL COMMENT 'Our canonical order number (e.g., TR-1234)',
  `payload` longtext DEFAULT NULL COMMENT 'Raw API response snapshot (JSON)',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_transfer_carrier` (`transfer_id`,`carrier`),
  KEY `idx_order_id` (`order_id`),
  KEY `idx_order_number` (`order_number`),
  CONSTRAINT `fk_tco_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='External carrier orders per transfer (NZ Post, GSS, etc).';

CREATE TABLE `transfer_configurations` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `allocation_method` tinyint(1) NOT NULL DEFAULT 1,
  `power_factor` decimal(4,2) NOT NULL DEFAULT 2.00,
  `min_allocation_pct` decimal(5,2) NOT NULL DEFAULT 5.00,
  `max_allocation_pct` decimal(5,2) NOT NULL DEFAULT 50.00,
  `rounding_method` tinyint(1) NOT NULL DEFAULT 0,
  `is_preset` tinyint(1) NOT NULL DEFAULT 0,
  `is_active` tinyint(1) NOT NULL DEFAULT 1,
  `enable_safety_checks` tinyint(1) NOT NULL DEFAULT 1,
  `enable_logging` tinyint(1) NOT NULL DEFAULT 1,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `created_by` varchar(50) DEFAULT NULL,
  `updated_by` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_name` (`name`),
  KEY `idx_preset` (`is_preset`),
  KEY `idx_active` (`is_active`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_discrepancies` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `item_id` int(11) DEFAULT NULL,
  `product_id` varchar(64) NOT NULL,
  `type` enum('missing','damaged','lost','mistake') NOT NULL,
  `qty` int(11) NOT NULL,
  `notes` text DEFAULT NULL,
  `status` enum('open','reconciled','void') NOT NULL DEFAULT 'open',
  `created_by` int(11) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NULL DEFAULT NULL ON UPDATE current_timestamp(),
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_td_transfer` (`transfer_id`),
  KEY `idx_td_item` (`item_id`),
  KEY `idx_td_status` (`status`),
  KEY `idx_td_product` (`product_id`),
  KEY `idx_td_status_created` (`status`,`created_at`),
  KEY `idx_td_transfer_created` (`transfer_id`,`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_executions` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` bigint(20) unsigned DEFAULT NULL,
  `public_id` varchar(32) DEFAULT NULL,
  `alias_code` varchar(24) DEFAULT NULL,
  `config_id` int(10) unsigned NOT NULL,
  `simulation_mode` tinyint(1) NOT NULL DEFAULT 1,
  `status` enum('pending','running','completed','failed','cancelled') NOT NULL DEFAULT 'pending',
  `total_items_processed` int(10) unsigned NOT NULL DEFAULT 0,
  `execution_time_seconds` decimal(10,3) DEFAULT NULL,
  `error_message` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `completed_at` timestamp NULL DEFAULT NULL,
  `updated_at` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `executed_by` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_tx_pub` (`public_id`),
  UNIQUE KEY `uniq_tx_alias` (`alias_code`),
  KEY `fk_config` (`config_id`),
  KEY `idx_status` (`status`),
  KEY `idx_created` (`created_at`),
  KEY `idx_tx_transfer` (`transfer_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_idempotency` (
  `idem_key` varchar(128) NOT NULL,
  `idem_hash` char(64) NOT NULL,
  `vend_id` varchar(64) DEFAULT NULL,
  `vend_number` varchar(64) DEFAULT NULL,
  `response_json` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`response_json`)),
  `status_code` smallint(6) DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`idem_key`),
  KEY `idx_idem_hash` (`idem_hash`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `transfer_item_analytics` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `item_id` int(11) NOT NULL,
  `product_id` varchar(36) DEFAULT NULL,
  `sku` varchar(255) DEFAULT NULL,
  `scans_required` int(10) unsigned DEFAULT 1,
  `scans_actual` int(10) unsigned DEFAULT 0,
  `scan_accuracy_pct` decimal(5,2) DEFAULT NULL,
  `first_scan_at` datetime(3) DEFAULT NULL,
  `last_scan_at` datetime(3) DEFAULT NULL,
  `total_handling_time_seconds` int(10) unsigned DEFAULT NULL,
  `errors_encountered` int(10) unsigned DEFAULT 0,
  `error_types` longtext DEFAULT NULL,
  `corrections_made` int(10) unsigned DEFAULT 0,
  `handlers` longtext DEFAULT NULL,
  `completed` tinyint(1) DEFAULT 0,
  `completed_at` datetime(3) DEFAULT NULL,
  `metadata` longtext DEFAULT NULL,
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_transfer_item` (`transfer_id`,`item_id`),
  KEY `idx_product` (`product_id`),
  KEY `idx_sku` (`sku`),
  KEY `idx_completed` (`completed`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Item-level handling analytics for process optimization';

CREATE TABLE `transfer_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Transfer line ID',
  `transfer_id` int(11) NOT NULL COMMENT 'FK to transfers.id',
  `product_id` varchar(45) NOT NULL COMMENT 'Vend product UUID',
  `qty_requested` int(11) NOT NULL COMMENT 'Requested quantity',
  `qty_sent_total` int(11) DEFAULT 0 COMMENT 'Cumulative sent qty (across shipments)',
  `qty_received_total` int(11) DEFAULT 0 COMMENT 'Cumulative received qty (across shipments)',
  `confirmation_status` enum('pending','accepted','declined') NOT NULL DEFAULT 'pending' COMMENT 'Staff multi-store confirmation',
  `confirmed_by_store` int(11) DEFAULT NULL COMMENT 'UserID from supplying store who confirmed',
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Last time this transfer item was updated',
  `deleted_by` int(11) DEFAULT NULL COMMENT 'User ID of staff who soft-deleted this transfer item',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT 'When the transfer item was soft deleted',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_item_transfer_product` (`transfer_id`,`product_id`),
  KEY `idx_item_transfer` (`transfer_id`),
  KEY `idx_item_product` (`product_id`),
  KEY `idx_item_confirm` (`confirmation_status`),
  KEY `idx_items_outstanding` (`transfer_id`,`confirmation_status`),
  KEY `idx_ti_transfer_product` (`transfer_id`,`product_id`),
  KEY `idx_items_transfer_status` (`transfer_id`,`confirmation_status`),
  CONSTRAINT `fk_items_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `chk_item_qtys_nonneg` CHECK (`qty_requested` >= 0 and `qty_sent_total` >= 0 and `qty_received_total` >= 0),
  CONSTRAINT `chk_item_qtys_bounds` CHECK (`qty_sent_total` <= `qty_requested` and `qty_received_total` <= `qty_sent_total`)
) ENGINE=InnoDB AUTO_INCREMENT=253005 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Product lines for a transfer; tracks requested/sent/received and store confirmations.';

CREATE TABLE `transfer_labels` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(10) unsigned NOT NULL,
  `order_id` bigint(20) unsigned DEFAULT NULL,
  `carrier_code` varchar(32) NOT NULL,
  `tracking` varchar(64) NOT NULL,
  `label_url` varchar(255) NOT NULL,
  `spooled` tinyint(1) NOT NULL DEFAULT 0,
  `idem_key` varchar(80) DEFAULT NULL,
  `idem_hash` char(64) DEFAULT NULL,
  `created_by` int(10) unsigned DEFAULT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_transfer_tracking` (`transfer_id`,`tracking`),
  KEY `idx_order` (`order_id`),
  KEY `idx_transfer` (`transfer_id`),
  KEY `idx_labels_tracking` (`tracking`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_log_archive` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `original_log_id` bigint(20) unsigned NOT NULL COMMENT 'Original ID from transfer_unified_log',
  `trace_id` varchar(100) NOT NULL,
  `category` varchar(50) NOT NULL,
  `event_type` varchar(100) NOT NULL,
  `severity` varchar(20) NOT NULL,
  `message` text NOT NULL,
  `event_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`event_data`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Original creation timestamp',
  `archived_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_trace` (`trace_id`),
  KEY `idx_original` (`original_log_id`),
  KEY `idx_archived` (`archived_at`),
  KEY `idx_category` (`category`,`archived_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Archived logs for compliance (7 year retention)';

CREATE TABLE `transfer_logs` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'Log entry ID',
  `transfer_id` int(11) DEFAULT NULL COMMENT 'FK to transfers.id (optional, event scope)',
  `shipment_id` int(11) DEFAULT NULL COMMENT 'FK to transfer_shipments.id (optional)',
  `item_id` int(11) DEFAULT NULL COMMENT 'FK to transfer_items.id (optional)',
  `parcel_id` int(11) DEFAULT NULL COMMENT 'FK to transfer_parcels.id (optional)',
  `staff_transfer_id` int(10) unsigned DEFAULT NULL COMMENT 'FK to staff_transfers.id (optional, unsigned)',
  `event_type` varchar(100) NOT NULL COMMENT 'CREATE|STATUS_CHANGE|ADD_ITEM|PACKED|SENT|RECEIVED|CANCELLED|NOTE|WEBHOOK|... ',
  `event_data` longtext DEFAULT NULL COMMENT 'JSON payload (old/new values, raw webhook/API bodies)',
  `actor_user_id` int(11) DEFAULT NULL COMMENT 'User performing action (if any)',
  `actor_role` varchar(50) DEFAULT NULL COMMENT 'Role/group (optional)',
  `severity` enum('info','warning','error','critical') DEFAULT 'info',
  `source_system` varchar(50) NOT NULL DEFAULT 'CIS' COMMENT 'CIS|VendWebhook|API|TaskRunner etc.',
  `trace_id` varchar(64) DEFAULT NULL COMMENT 'Correlation ID for grouped events',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `customer_id` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_logs_transfer` (`transfer_id`,`created_at`),
  KEY `idx_logs_shipment` (`shipment_id`,`created_at`),
  KEY `idx_logs_item` (`item_id`,`created_at`),
  KEY `idx_logs_parcel` (`parcel_id`,`created_at`),
  KEY `idx_logs_staff` (`staff_transfer_id`,`created_at`),
  KEY `idx_logs_event` (`event_type`,`created_at`),
  KEY `idx_logs_customer` (`customer_id`),
  KEY `idx_tl_transfer_type_time` (`transfer_id`,`event_type`,`created_at`),
  KEY `idx_tl_trace` (`trace_id`),
  KEY `idx_tl_source_severity_time` (`source_system`,`severity`,`created_at`),
  CONSTRAINT `fk_logs_customer` FOREIGN KEY (`customer_id`) REFERENCES `vend_customers` (`id`),
  CONSTRAINT `fk_logs_item` FOREIGN KEY (`item_id`) REFERENCES `transfer_items` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `fk_logs_parcel` FOREIGN KEY (`parcel_id`) REFERENCES `transfer_parcels` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `fk_logs_shipment` FOREIGN KEY (`shipment_id`) REFERENCES `transfer_shipments` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `fk_logs_staff` FOREIGN KEY (`staff_transfer_id`) REFERENCES `staff_transfers` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `fk_logs_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `chk_logs_event_json` CHECK (`event_data` is null or json_valid(`event_data`))
) ENGINE=InnoDB AUTO_INCREMENT=3436 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Immutable audit log. One row per event; JSON payloads, actor, and origin.';

CREATE TABLE `transfer_media` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `parcel_id` int(11) DEFAULT NULL,
  `discrepancy_id` int(11) DEFAULT NULL,
  `kind` enum('photo','video','other') NOT NULL DEFAULT 'photo',
  `mime_type` varchar(100) NOT NULL,
  `size_bytes` int(10) unsigned NOT NULL DEFAULT 0,
  `path` varchar(255) NOT NULL,
  `thumb_path` varchar(255) DEFAULT NULL,
  `uploaded_by` int(11) DEFAULT NULL,
  `src_ip` varchar(45) DEFAULT NULL,
  `user_agent` varchar(255) DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_transfer_time` (`transfer_id`,`created_at`),
  KEY `idx_parcel` (`parcel_id`),
  KEY `idx_discrepancy` (`discrepancy_id`),
  KEY `idx_tm_parcel_time` (`parcel_id`,`created_at`),
  CONSTRAINT `fk_tm_discrepancy` FOREIGN KEY (`discrepancy_id`) REFERENCES `transfer_discrepancies` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_tm_parcel` FOREIGN KEY (`parcel_id`) REFERENCES `transfer_parcels` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_tm_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_metrics` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) DEFAULT NULL,
  `source_outlet_id` int(11) DEFAULT NULL,
  `destination_outlet_id` int(11) DEFAULT NULL,
  `total_items` int(11) DEFAULT 0,
  `total_quantity` int(11) DEFAULT 0,
  `status` varchar(50) DEFAULT 'pending',
  `processing_time_ms` int(11) DEFAULT 0,
  `api_calls_made` int(11) DEFAULT 0,
  `cost_calculated` decimal(10,2) DEFAULT 0.00,
  `created_at` datetime NOT NULL,
  `metadata` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`metadata`)),
  PRIMARY KEY (`id`),
  KEY `idx_transfer_id` (`transfer_id`),
  KEY `idx_source_outlet` (`source_outlet_id`),
  KEY `idx_destination_outlet` (`destination_outlet_id`),
  KEY `idx_status` (`status`),
  KEY `idx_created_at` (`created_at`),
  KEY `idx_date_status` (`created_at`,`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL COMMENT 'FK to transfers.id',
  `note_text` mediumtext NOT NULL COMMENT 'Staff-entered note about the transfer',
  `created_by` int(11) NOT NULL COMMENT 'User ID of staff who added the note',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp() COMMENT 'When the note was added',
  `updated_at` timestamp NULL DEFAULT NULL ON UPDATE current_timestamp(),
  `deleted_at` timestamp NULL DEFAULT NULL,
  `deleted_by` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_note_created` (`created_at`),
  KEY `idx_note_deleted` (`deleted_at`),
  KEY `idx_notes_transfer_created` (`transfer_id`,`created_at`),
  CONSTRAINT `transfer_notes_ibfk_1` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4381 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='History of notes attached to transfers (umbrella-level context).';

CREATE TABLE `transfer_pack_lock_audit` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `action` varchar(50) NOT NULL,
  `status` varchar(20) NOT NULL DEFAULT 'success',
  `metadata` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`metadata`)),
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` varchar(500) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `transfer_id` (`transfer_id`,`action`),
  KEY `user_id` (`user_id`,`created_at`),
  KEY `created_at` (`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_pack_lock_requests` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `requested_at` datetime NOT NULL DEFAULT current_timestamp(),
  `status` enum('pending','accepted','declined','expired','cancelled') NOT NULL DEFAULT 'pending',
  `responded_at` datetime DEFAULT NULL,
  `expires_at` datetime DEFAULT NULL,
  `client_fingerprint` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uq_pending` (`transfer_id`,`user_id`,`status`),
  KEY `transfer_id` (`transfer_id`,`status`),
  KEY `expires_at` (`expires_at`),
  KEY `user_id` (`user_id`),
  KEY `idx_tplr_status_exp` (`status`,`expires_at`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_pack_locks` (
  `transfer_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `acquired_at` datetime NOT NULL DEFAULT current_timestamp(),
  `expires_at` datetime NOT NULL,
  `heartbeat_at` datetime NOT NULL DEFAULT current_timestamp(),
  `client_fingerprint` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`transfer_id`),
  KEY `expires_at` (`expires_at`),
  KEY `user_id` (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_parcel_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Parcel item row ID',
  `parcel_id` int(11) NOT NULL COMMENT 'FK to transfer_parcels.id',
  `item_id` int(11) NOT NULL COMMENT 'FK to transfer_items.id',
  `qty_received` int(11) NOT NULL DEFAULT 0,
  `locked_at` timestamp NULL DEFAULT current_timestamp() COMMENT 'Locked upon insert; row is not editable afterwards',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `qty` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_parcel_item` (`parcel_id`,`item_id`),
  KEY `idx_tpi_parcel` (`parcel_id`),
  KEY `idx_tpi_item` (`item_id`),
  CONSTRAINT `fk_tpi_item` FOREIGN KEY (`item_id`) REFERENCES `transfer_items` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_tpi_parcel` FOREIGN KEY (`parcel_id`) REFERENCES `transfer_parcels` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `chk_tpi_qtys_nonneg` CHECK (`qty` >= 0 and `qty_received` >= 0),
  CONSTRAINT `chk_tpi_bounds` CHECK (`qty_received` <= `qty`)
) ENGINE=InnoDB AUTO_INCREMENT=53572 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Per-parcel receiving granularity to allow box-by-box acceptance.';

CREATE TABLE `transfer_parcels` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Parcel ID',
  `shipment_id` int(11) NOT NULL COMMENT 'FK to transfer_shipments.id',
  `box_number` int(11) NOT NULL COMMENT '1..N within a shipment',
  `tracking_number` varchar(191) DEFAULT NULL,
  `tracking_ref_raw` text DEFAULT NULL,
  `courier` varchar(50) DEFAULT NULL,
  `weight_grams` int(10) unsigned DEFAULT NULL,
  `length_mm` int(10) unsigned DEFAULT NULL,
  `width_mm` int(10) unsigned DEFAULT NULL,
  `height_mm` int(10) unsigned DEFAULT NULL,
  `weight_kg` decimal(10,2) DEFAULT NULL,
  `label_url` varchar(255) DEFAULT NULL,
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Last time this parcel was updated',
  `deleted_by` int(11) DEFAULT NULL COMMENT 'User ID of staff who soft-deleted this parcel',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT 'When the parcel was soft deleted',
  `status` enum('pending','labelled','manifested','in_transit','received','missing','damaged','cancelled','exception') NOT NULL DEFAULT 'pending',
  `notes` mediumtext DEFAULT NULL COMMENT 'Parcel-specific notes (damage, exception, missing context)',
  `received_at` timestamp NULL DEFAULT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `parcel_number` int(11) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_parcel_boxnum` (`shipment_id`,`box_number`),
  UNIQUE KEY `uq_parcel_box` (`shipment_id`,`box_number`),
  KEY `idx_parcel_shipment` (`shipment_id`),
  KEY `idx_parcel_tracking` (`tracking_number`),
  KEY `idx_parcels_shipment_box` (`shipment_id`,`box_number`),
  KEY `idx_parcel_status_time` (`status`,`updated_at`),
  KEY `idx_parcel_shipment_status` (`shipment_id`,`status`),
  KEY `idx_parcels_shipment_updated` (`shipment_id`,`updated_at`),
  CONSTRAINT `fk_parcels_shipment` FOREIGN KEY (`shipment_id`) REFERENCES `transfer_shipments` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=3556 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Courier parcel metadata for a shipment (tracking, label, weight).';

CREATE TABLE `transfer_performance_logs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(10) unsigned NOT NULL,
  `user_id` int(10) unsigned NOT NULL,
  `event_type` enum('RELEASED_FOR_PACKING','PACKING_STARTED','PACKING_COMPLETED','CANCELLED') NOT NULL,
  `event_timestamp` timestamp NOT NULL DEFAULT current_timestamp(),
  `session_id` varchar(100) DEFAULT NULL,
  `user_agent` text DEFAULT NULL,
  `additional_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`additional_data`)),
  PRIMARY KEY (`id`),
  KEY `idx_transfer_events` (`transfer_id`,`event_type`),
  KEY `idx_user_performance` (`user_id`,`event_timestamp`),
  KEY `idx_timing_analysis` (`transfer_id`,`event_type`,`event_timestamp`),
  KEY `idx_tpl_user_time` (`user_id`,`event_timestamp`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_performance_metrics` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `metric_date` date NOT NULL COMMENT 'Date of metrics',
  `metric_hour` tinyint(3) unsigned DEFAULT NULL COMMENT 'Hour (0-23) for hourly aggregation',
  `category` varchar(50) NOT NULL COMMENT 'Metric category',
  `operation` varchar(100) NOT NULL COMMENT 'Specific operation measured',
  `total_operations` int(10) unsigned NOT NULL DEFAULT 0 COMMENT 'Total ops in period',
  `total_duration_ms` bigint(20) unsigned NOT NULL DEFAULT 0 COMMENT 'Sum of all durations',
  `avg_duration_ms` int(10) unsigned NOT NULL DEFAULT 0 COMMENT 'Average duration',
  `p50_duration_ms` int(10) unsigned DEFAULT NULL COMMENT 'Median duration',
  `p95_duration_ms` int(10) unsigned DEFAULT NULL COMMENT '95th percentile',
  `p99_duration_ms` int(10) unsigned DEFAULT NULL COMMENT '99th percentile',
  `success_count` int(10) unsigned NOT NULL DEFAULT 0,
  `error_count` int(10) unsigned NOT NULL DEFAULT 0,
  `error_rate` decimal(5,4) GENERATED ALWAYS AS (case when `total_operations` > 0 then `error_count` / `total_operations` else 0 end) STORED COMMENT 'Error rate (0.0000 to 1.0000)',
  `ai_decisions` int(10) unsigned NOT NULL DEFAULT 0 COMMENT 'Number of AI decisions',
  `ai_avg_confidence` decimal(5,4) DEFAULT NULL COMMENT 'Average AI confidence',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `idx_metric` (`metric_date`,`metric_hour`,`category`,`operation`),
  KEY `idx_date` (`metric_date`),
  KEY `idx_category` (`category`,`metric_date`),
  KEY `idx_error_rate` (`error_rate`,`metric_date`),
  KEY `idx_tpm_op_date` (`operation`,`metric_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Aggregated performance metrics for BI dashboards and alerting';

CREATE TABLE `transfer_queue` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

CREATE TABLE `transfer_queue_log` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `trace_id` varchar(100) NOT NULL,
  `queue_name` varchar(100) NOT NULL COMMENT 'Queue identifier (e.g. vend_consignment_sync)',
  `operation` varchar(50) NOT NULL COMMENT 'enqueue, dequeue, retry, fail, complete',
  `transfer_id` int(10) unsigned DEFAULT NULL,
  `vend_consignment_id` varchar(100) DEFAULT NULL,
  `idempotency_key` varchar(255) DEFAULT NULL COMMENT 'Prevents duplicate processing',
  `attempt_number` int(10) unsigned NOT NULL DEFAULT 1,
  `max_attempts` int(10) unsigned NOT NULL DEFAULT 3,
  `retry_delay_sec` int(10) unsigned DEFAULT NULL COMMENT 'Delay before next retry',
  `next_retry_at` timestamp NULL DEFAULT NULL COMMENT 'Scheduled retry time',
  `request_payload` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Original request data' CHECK (json_valid(`request_payload`)),
  `response_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'API response or result' CHECK (json_valid(`response_data`)),
  `error_message` text DEFAULT NULL COMMENT 'Error details if failed',
  `error_code` varchar(50) DEFAULT NULL COMMENT 'Error code for categorization',
  `http_status` int(10) unsigned DEFAULT NULL COMMENT 'HTTP status code from API',
  `processing_ms` int(10) unsigned DEFAULT NULL COMMENT 'Processing duration',
  `api_latency_ms` int(10) unsigned DEFAULT NULL COMMENT 'External API latency',
  `status` enum('pending','processing','completed','failed','cancelled') NOT NULL,
  `priority` tinyint(3) unsigned NOT NULL DEFAULT 5 COMMENT '1=highest, 10=lowest',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `completed_at` timestamp NULL DEFAULT NULL COMMENT 'When operation completed',
  PRIMARY KEY (`id`),
  KEY `idx_trace` (`trace_id`),
  KEY `idx_queue` (`queue_name`,`status`,`priority`,`created_at`),
  KEY `idx_transfer` (`transfer_id`),
  KEY `idx_vend` (`vend_consignment_id`),
  KEY `idx_idempotency` (`idempotency_key`),
  KEY `idx_retry` (`next_retry_at`,`status`),
  KEY `idx_status` (`status`,`created_at`),
  KEY `idx_queue_retry_status` (`next_retry_at`,`status`,`priority`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Queue operations for Vend consignment sync and retry logic';

CREATE TABLE `transfer_queue_metrics` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `metric_type` varchar(100) NOT NULL COMMENT 'Type of metric collected',
  `queue_name` varchar(255) NOT NULL DEFAULT 'default',
  `job_type` varchar(100) DEFAULT NULL,
  `value` decimal(15,4) NOT NULL COMMENT 'Metric value',
  `unit` varchar(50) NOT NULL COMMENT 'Metric unit (ms, count, percent, etc)',
  `metadata` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Additional metric context' CHECK (json_valid(`metadata`)),
  `outlet_from` varchar(50) DEFAULT NULL,
  `outlet_to` varchar(50) DEFAULT NULL,
  `worker_id` varchar(255) DEFAULT NULL,
  `recorded_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_metric_type_recorded` (`metric_type`,`recorded_at`),
  KEY `idx_queue_job_type` (`queue_name`,`job_type`),
  KEY `idx_outlet_metrics` (`outlet_from`,`outlet_to`,`recorded_at`),
  KEY `idx_worker_metrics` (`worker_id`,`recorded_at`),
  KEY `idx_cleanup_old_metrics` (`recorded_at`) COMMENT 'For metric retention cleanup'
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Performance and operational metrics for transfer queue system';

CREATE TABLE `transfer_receipt_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `receipt_id` int(11) NOT NULL,
  `transfer_item_id` int(11) NOT NULL,
  `qty_received` int(11) NOT NULL DEFAULT 0,
  `condition` varchar(32) DEFAULT 'ok',
  `notes` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `u_receipt_item` (`receipt_id`,`transfer_item_id`),
  KEY `idx_tri_receipt` (`receipt_id`),
  KEY `idx_tri_item` (`transfer_item_id`),
  CONSTRAINT `fk_tri_item` FOREIGN KEY (`transfer_item_id`) REFERENCES `transfer_items` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_tri_receipt` FOREIGN KEY (`receipt_id`) REFERENCES `transfer_receipts` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `chk_tri_qty_nonneg` CHECK (`qty_received` >= 0)
) ENGINE=InnoDB AUTO_INCREMENT=45909 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Lines received per transfer item with optional condition/notes';

CREATE TABLE `transfer_receipts` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `received_by` int(11) DEFAULT NULL,
  `received_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_tr_transfer` (`transfer_id`),
  KEY `idx_tr_created` (`created_at`),
  CONSTRAINT `fk_tr_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=586 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Header for receive sessions against a transfer';

CREATE TABLE `transfer_session_analytics` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `session_id` varchar(255) NOT NULL,
  `user_id` int(11) NOT NULL,
  `transfer_id` int(11) DEFAULT NULL,
  `page_type` enum('pack','receive','create','list','detail') NOT NULL,
  `session_start` datetime(3) NOT NULL,
  `session_end` datetime(3) DEFAULT NULL,
  `total_duration_seconds` int(10) unsigned DEFAULT NULL,
  `active_duration_seconds` int(10) unsigned DEFAULT NULL,
  `idle_duration_seconds` int(10) unsigned DEFAULT NULL,
  `total_interactions` int(10) unsigned DEFAULT 0,
  `scan_count` int(10) unsigned DEFAULT 0,
  `manual_entry_count` int(10) unsigned DEFAULT 0,
  `error_count` int(10) unsigned DEFAULT 0,
  `avg_response_time_ms` int(10) unsigned DEFAULT NULL,
  `page_load_time_ms` int(10) unsigned DEFAULT NULL,
  `largest_contentful_paint_ms` int(10) unsigned DEFAULT NULL,
  `first_input_delay_ms` int(10) unsigned DEFAULT NULL,
  `cumulative_layout_shift` decimal(5,3) DEFAULT NULL,
  `items_processed` int(10) unsigned DEFAULT 0,
  `completion_percentage` decimal(5,2) DEFAULT NULL,
  `completed` tinyint(1) DEFAULT 0,
  `device_type` enum('desktop','mobile','tablet','unknown') DEFAULT 'unknown',
  `browser` varchar(100) DEFAULT NULL,
  `os` varchar(100) DEFAULT NULL,
  `screen_resolution` varchar(50) DEFAULT NULL,
  `ip_address` varchar(45) DEFAULT NULL,
  `user_agent` text DEFAULT NULL,
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_session` (`session_id`),
  KEY `idx_user` (`user_id`),
  KEY `idx_transfer` (`transfer_id`),
  KEY `idx_page_type` (`page_type`),
  KEY `idx_start` (`session_start`),
  KEY `idx_composite` (`user_id`,`page_type`,`session_start`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Detailed analytics for user sessions';

CREATE TABLE `transfer_shipment_items` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Shipment line ID',
  `shipment_id` int(11) NOT NULL COMMENT 'FK to transfer_shipments.id',
  `item_id` int(11) NOT NULL COMMENT 'FK to transfer_items.id',
  `qty_sent` int(11) NOT NULL COMMENT 'Qty in this shipment wave',
  `qty_received` int(11) NOT NULL DEFAULT 0 COMMENT 'Qty received for this line+wave',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_shipment_item` (`shipment_id`,`item_id`),
  KEY `idx_tsi_shipment` (`shipment_id`),
  KEY `idx_tsi_item` (`item_id`),
  CONSTRAINT `fk_tsi_item` FOREIGN KEY (`item_id`) REFERENCES `transfer_items` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `fk_tsi_shipment` FOREIGN KEY (`shipment_id`) REFERENCES `transfer_shipments` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `chk_tsi_qtys_nonneg` CHECK (`qty_sent` >= 0 and `qty_received` >= 0),
  CONSTRAINT `chk_tsi_qtys_bounds` CHECK (`qty_received` <= `qty_sent`),
  CONSTRAINT `chk_tsi_recv_bound` CHECK (`qty_received` <= `qty_sent`)
) ENGINE=InnoDB AUTO_INCREMENT=54550 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Items included in a particular shipment wave; validates sent/received bounds.';

CREATE TABLE `transfer_shipment_notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Note ID',
  `shipment_id` int(11) NOT NULL COMMENT 'FK to transfer_shipments.id',
  `note_text` mediumtext NOT NULL COMMENT 'The note text entered by staff',
  `created_by` int(11) NOT NULL COMMENT 'User ID of the staff who wrote the note',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp() COMMENT 'When the note was written',
  PRIMARY KEY (`id`),
  KEY `idx_shipment` (`shipment_id`),
  CONSTRAINT `fk_shipment_notes` FOREIGN KEY (`shipment_id`) REFERENCES `transfer_shipments` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=666 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Free-form history notes for shipments; multiple entries allowed per shipment';

CREATE TABLE `transfer_shipments` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Partial shipment ID',
  `transfer_id` int(11) NOT NULL COMMENT 'FK to transfers.id',
  `delivery_mode` enum('auto','manual','dropoff','pickup','courier','internal_drive') NOT NULL DEFAULT 'auto',
  `dest_name` varchar(160) DEFAULT NULL,
  `dest_company` varchar(160) DEFAULT NULL,
  `dest_addr1` varchar(160) DEFAULT NULL,
  `dest_addr2` varchar(160) DEFAULT NULL,
  `dest_suburb` varchar(120) DEFAULT NULL,
  `dest_city` varchar(120) DEFAULT NULL,
  `dest_postcode` varchar(16) DEFAULT NULL,
  `dest_email` varchar(190) DEFAULT NULL,
  `dest_phone` varchar(50) DEFAULT NULL,
  `dest_instructions` varchar(500) DEFAULT NULL,
  `status` enum('packed','in_transit','partial','received','cancelled') NOT NULL DEFAULT 'packed' COMMENT 'Shipment lifecycle incl. partial support',
  `packed_at` timestamp NULL DEFAULT NULL,
  `packed_by` int(11) DEFAULT NULL,
  `received_at` timestamp NULL DEFAULT NULL,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `received_by` int(11) DEFAULT NULL,
  `driver_staff_id` int(11) DEFAULT NULL COMMENT 'If internal_drive, who drove it',
  `nicotine_in_shipment` tinyint(1) NOT NULL DEFAULT 0 COMMENT 'Regulatory flag: this shipment contains nicotine',
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Last time this shipment was updated',
  `deleted_by` int(11) DEFAULT NULL COMMENT 'User ID of staff who soft-deleted this shipment',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT 'When the shipment was soft deleted',
  `carrier_name` varchar(120) DEFAULT NULL,
  `tracking_number` varchar(120) DEFAULT NULL,
  `tracking_url` varchar(300) DEFAULT NULL,
  `dispatched_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_shipments_transfer` (`transfer_id`),
  KEY `idx_shipments_status` (`status`),
  KEY `idx_shipments_mode` (`delivery_mode`),
  KEY `idx_shipments_packed_at` (`packed_at`),
  KEY `idx_shipments_received_at` (`received_at`),
  CONSTRAINT `fk_shipments_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=5280 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Partial shipment waves for a transfer. Supports courier vs internal drive vs pickup.';

CREATE TABLE `transfer_tracking_events` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `parcel_id` int(11) DEFAULT NULL,
  `tracking_number` varchar(100) DEFAULT NULL,
  `carrier` varchar(50) NOT NULL,
  `event_code` varchar(64) NOT NULL,
  `event_text` varchar(255) NOT NULL,
  `occurred_at` datetime NOT NULL,
  `raw_json` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`raw_json`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `idx_transfer_time` (`transfer_id`,`occurred_at`),
  KEY `idx_parcel_time` (`parcel_id`,`occurred_at`),
  KEY `idx_tracking` (`tracking_number`),
  KEY `idx_tte_carrier_tracking` (`carrier`,`tracking_number`),
  CONSTRAINT `fk_tte_parcel` FOREIGN KEY (`parcel_id`) REFERENCES `transfer_parcels` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_tte_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_ui_sessions` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `transfer_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `state_json` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(`state_json`)),
  `autosave_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `resumed_at` timestamp NULL DEFAULT NULL,
  `expires_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uq_ui_transfer_user` (`transfer_id`,`user_id`),
  KEY `idx_ui_expiry` (`expires_at`),
  KEY `idx_tuis_transfer_exp` (`transfer_id`,`expires_at`),
  CONSTRAINT `fk_ui_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_unified_log` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `trace_id` varchar(100) NOT NULL COMMENT 'Distributed tracing ID',
  `correlation_id` varchar(100) DEFAULT NULL COMMENT 'Links related operations across services',
  `category` varchar(50) NOT NULL COMMENT 'transfer, shipment, ai_decision, vend_sync, queue, etc.',
  `event_type` varchar(100) NOT NULL COMMENT 'Specific event name',
  `severity` enum('debug','info','notice','warning','error','critical','alert','emergency') NOT NULL DEFAULT 'info' COMMENT 'PSR-3 severity levels',
  `message` text NOT NULL COMMENT 'Human-readable event description',
  `transfer_id` int(10) unsigned DEFAULT NULL,
  `shipment_id` int(10) unsigned DEFAULT NULL,
  `parcel_id` int(10) unsigned DEFAULT NULL,
  `item_id` int(10) unsigned DEFAULT NULL,
  `outlet_id` varchar(50) DEFAULT NULL,
  `vend_consignment_id` varchar(100) DEFAULT NULL COMMENT 'Vend consignment UUID',
  `vend_transfer_id` varchar(100) DEFAULT NULL COMMENT 'Vend transfer UUID',
  `ai_decision_id` bigint(20) unsigned DEFAULT NULL COMMENT 'FK to ai_freight_decisions or transfer_ai_audit_log',
  `ai_model_version` varchar(50) DEFAULT NULL COMMENT 'Model version used for decision',
  `ai_confidence` decimal(5,4) DEFAULT NULL COMMENT 'Confidence score (0.0000 to 1.0000)',
  `actor_user_id` int(10) unsigned DEFAULT NULL COMMENT 'Staff ID who triggered action',
  `actor_role` varchar(50) DEFAULT NULL COMMENT 'User role at time of action',
  `actor_ip` varchar(45) DEFAULT NULL COMMENT 'IPv4 or IPv6 address',
  `event_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Structured event payload (sanitized PII)' CHECK (json_valid(`event_data`)),
  `context_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Additional context metadata' CHECK (json_valid(`context_data`)),
  `tags` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Searchable tags array for filtering' CHECK (json_valid(`tags`)),
  `duration_ms` int(10) unsigned DEFAULT NULL COMMENT 'Operation duration in milliseconds',
  `memory_mb` decimal(10,2) DEFAULT NULL COMMENT 'Memory usage in MB',
  `api_latency_ms` int(10) unsigned DEFAULT NULL COMMENT 'External API call latency',
  `db_query_ms` int(10) unsigned DEFAULT NULL COMMENT 'Database query time',
  `source_system` varchar(50) NOT NULL DEFAULT 'CIS' COMMENT 'System that generated event',
  `environment` enum('dev','staging','production') NOT NULL DEFAULT 'production',
  `server_name` varchar(100) DEFAULT NULL COMMENT 'Hostname of server',
  `php_version` varchar(20) DEFAULT NULL COMMENT 'PHP version',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `event_timestamp` timestamp NULL DEFAULT NULL COMMENT 'When event actually occurred (vs logged)',
  PRIMARY KEY (`id`),
  KEY `idx_trace` (`trace_id`),
  KEY `idx_correlation` (`correlation_id`),
  KEY `idx_category_severity` (`category`,`severity`,`created_at`),
  KEY `idx_transfer` (`transfer_id`,`created_at`),
  KEY `idx_shipment` (`shipment_id`),
  KEY `idx_vend_consignment` (`vend_consignment_id`),
  KEY `idx_ai_decision` (`ai_decision_id`),
  KEY `idx_actor` (`actor_user_id`,`created_at`),
  KEY `idx_event_type` (`event_type`,`created_at`),
  KEY `idx_created` (`created_at`),
  KEY `idx_severity_created` (`severity`,`created_at`),
  KEY `idx_tul_transfer_created_conf` (`transfer_id`,`created_at`,`ai_confidence`),
  FULLTEXT KEY `idx_message` (`message`)
) ENGINE=InnoDB AUTO_INCREMENT=94 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Unified transfer system event log with AI/Vend/queue integration';

CREATE TABLE `transfer_upload_tokens` (
  `token` char(64) NOT NULL,
  `transfer_id` int(11) NOT NULL,
  `parcel_id` int(11) DEFAULT NULL,
  `discrepancy_id` int(11) DEFAULT NULL,
  `max_uses` int(10) unsigned NOT NULL DEFAULT 10,
  `used_count` int(10) unsigned NOT NULL DEFAULT 0,
  `expires_at` datetime NOT NULL,
  `created_by` int(11) DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`token`),
  KEY `idx_transfer_exp` (`transfer_id`,`expires_at`),
  KEY `fk_tut_parcel` (`parcel_id`),
  KEY `fk_tut_discrepancy` (`discrepancy_id`),
  CONSTRAINT `fk_tut_discrepancy` FOREIGN KEY (`discrepancy_id`) REFERENCES `transfer_discrepancies` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_tut_parcel` FOREIGN KEY (`parcel_id`) REFERENCES `transfer_parcels` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_tut_transfer` FOREIGN KEY (`transfer_id`) REFERENCES `transfers` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

CREATE TABLE `transfer_user_efficiency` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `date` date NOT NULL,
  `transfers_packed` int(10) unsigned DEFAULT 0,
  `transfers_received` int(10) unsigned DEFAULT 0,
  `items_packed` int(10) unsigned DEFAULT 0,
  `items_received` int(10) unsigned DEFAULT 0,
  `total_active_time_seconds` int(10) unsigned DEFAULT 0,
  `avg_items_per_minute` decimal(6,2) DEFAULT NULL,
  `accuracy_score` decimal(5,2) DEFAULT NULL,
  `error_count` int(10) unsigned DEFAULT 0,
  `discrepancy_count` int(10) unsigned DEFAULT 0,
  `avg_pack_time_seconds` int(10) unsigned DEFAULT NULL,
  `avg_receive_time_seconds` int(10) unsigned DEFAULT NULL,
  `fastest_pack_time_seconds` int(10) unsigned DEFAULT NULL,
  `fastest_receive_time_seconds` int(10) unsigned DEFAULT NULL,
  `efficiency_score` decimal(5,2) DEFAULT NULL,
  `daily_rank` int(10) unsigned DEFAULT NULL,
  `target_items_per_hour` int(10) unsigned DEFAULT 60,
  `target_accuracy_pct` decimal(5,2) DEFAULT 95.00,
  `goals_met` tinyint(1) DEFAULT 0,
  `created_at` datetime DEFAULT current_timestamp(),
  `updated_at` datetime DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_user_date` (`user_id`,`date`),
  KEY `idx_date` (`date`),
  KEY `idx_efficiency` (`efficiency_score`),
  KEY `idx_rank` (`daily_rank`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Daily efficiency scores and rankings for gamification';

CREATE TABLE `transfer_validation_cache` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `cache_key` varchar(255) NOT NULL COMMENT 'Hash of validation parameters',
  `transfer_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'Original transfer request data' CHECK (json_valid(`transfer_data`)),
  `validation_result` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT 'Validation result with details' CHECK (json_valid(`validation_result`)),
  `status` enum('valid','invalid','error') NOT NULL,
  `errors` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Validation errors if any' CHECK (json_valid(`errors`)),
  `warnings` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Validation warnings' CHECK (json_valid(`warnings`)),
  `safeguards_applied` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Applied business safeguards' CHECK (json_valid(`safeguards_applied`)),
  `economic_analysis` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Cost analysis results' CHECK (json_valid(`economic_analysis`)),
  `outlet_from` varchar(50) NOT NULL,
  `outlet_to` varchar(50) NOT NULL,
  `total_items` int(10) unsigned NOT NULL DEFAULT 0,
  `total_value` decimal(12,2) NOT NULL DEFAULT 0.00,
  `courier_cost` decimal(10,2) DEFAULT NULL,
  `requires_approval` tinyint(1) NOT NULL DEFAULT 0,
  `approval_reasons` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`approval_reasons`)),
  `expires_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp() COMMENT 'Cache expiration time',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_cache_key` (`cache_key`),
  KEY `idx_outlet_from_to` (`outlet_from`,`outlet_to`),
  KEY `idx_status_expires` (`status`,`expires_at`),
  KEY `idx_requires_approval` (`requires_approval`,`created_at`),
  KEY `idx_cleanup_expired` (`expires_at`),
  KEY `idx_tvc_requires_created` (`requires_approval`,`created_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Cached validation results for transfer requests';

CREATE TABLE `transfers` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'CIS transfer ID (primary)',
  `public_id` varchar(40) NOT NULL,
  `vend_transfer_id` char(36) DEFAULT NULL COMMENT 'Vend/Lightspeed consignment UUID (unique when present)',
  `consignment_id` bigint(20) unsigned DEFAULT NULL COMMENT 'Link to queue_consignments.id for Lightspeed sync',
  `transfer_category` enum('STOCK','JUICE','STAFF','RETURN','PURCHASE_ORDER') NOT NULL,
  `creation_method` enum('MANUAL','AUTOMATED') NOT NULL DEFAULT 'MANUAL',
  `vend_number` varchar(64) DEFAULT NULL,
  `vend_url` varchar(255) DEFAULT NULL,
  `vend_origin` enum('CONSIGNMENT','PURCHASE_ORDER','TRANSFER') DEFAULT NULL,
  `outlet_from` varchar(100) NOT NULL COMMENT 'Source outlet UUID (Vend)',
  `outlet_to` varchar(100) NOT NULL COMMENT 'Destination outlet UUID (Vend)',
  `created_by` int(11) NOT NULL COMMENT 'CIS user who created this transfer',
  `staff_transfer_id` int(10) unsigned DEFAULT NULL COMMENT 'Link to existing staff_transfers.id (unsigned)',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `deleted_by` int(11) DEFAULT NULL COMMENT 'User ID of staff who soft-deleted this transfer',
  `deleted_at` timestamp NULL DEFAULT NULL COMMENT 'When the transfer was soft deleted',
  `customer_id` varchar(45) DEFAULT NULL,
  `state` enum('DRAFT','OPEN','PACKING','PACKAGED','SENT','RECEIVING','PARTIAL','RECEIVED','CLOSED','CANCELLED','ARCHIVED') NOT NULL DEFAULT 'DRAFT',
  `total_boxes` int(10) unsigned NOT NULL DEFAULT 0,
  `total_weight_g` bigint(20) unsigned NOT NULL DEFAULT 0,
  `draft_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(`draft_data`)),
  `draft_updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_transfers_public_id` (`public_id`),
  UNIQUE KEY `uniq_transfers_vend_uuid` (`vend_transfer_id`),
  KEY `idx_transfers_from_status_date` (`outlet_from`,`created_at`),
  KEY `idx_transfers_to_status_date` (`outlet_to`,`created_at`),
  KEY `idx_transfers_staff` (`staff_transfer_id`),
  KEY `idx_transfers_created` (`created_at`),
  KEY `idx_transfers_type_created` (`created_at`),
  KEY `idx_transfers_to_created` (`outlet_to`,`created_at`),
  KEY `idx_transfers_vend` (`vend_transfer_id`),
  KEY `idx_transfers_customer` (`customer_id`),
  KEY `idx_transfers_state` (`state`),
  KEY `idx_consignment_id` (`consignment_id`),
  KEY `idx_transfers_type_status_created` (`created_at`),
  KEY `idx_transfers_vend_number` (`vend_number`),
  KEY `idx_transfers_category` (`transfer_category`),
  KEY `idx_transfers_creation_method` (`creation_method`),
  KEY `idx_transfers_from_to_state` (`outlet_from`,`outlet_to`,`state`),
  KEY `idx_transfers_created_at` (`created_at`),
  CONSTRAINT `fk_transfers_consignment` FOREIGN KEY (`consignment_id`) REFERENCES `queue_consignments` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `fk_transfers_customer` FOREIGN KEY (`customer_id`) REFERENCES `vend_customers` (`id`),
  CONSTRAINT `fk_transfers_staff` FOREIGN KEY (`staff_transfer_id`) REFERENCES `staff_transfers` (`id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `chk_transfers_outlets_diff` CHECK (`outlet_from` <> `outlet_to`)
) ENGINE=InnoDB AUTO_INCREMENT=26915 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='Atomic outlet→outlet transfer. Single Vend consignment with strict lifecycle & Vend UUID.';

